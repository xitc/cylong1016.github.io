<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>与青春有关的日子（2001&amp;2011）十年纪之全明星</title>
    <url>/blog/2011/02/24/iverson-2001-2011/</url>
    <content><![CDATA[<hr>
<p>没有奇迹。<br>纵使勒布朗·詹姆斯率东部“殊死”抵抗一番，依旧未能填平那将近20分的沟壑。<br>终于，有人怀念起十年以前，那个与世界为敌，狂妄得无法无天的小子来了。<br>“我离开后，你们才会真正明白我的价值。”<br>我们的艾如是说道。</p>
<a id="more"></a>
<p>还记得那时的全明星吗？<br>尚在湖人的沙克，梳着辫子头的天尊，拄着双拐的希尔，笑容灿烂的马布里，引爆全场的卡特，顶着怪异头型的科比，一副无所谓表情的麦迪，以及，那时风华绝代的阿伦艾弗森。<br>那些是时代的宠儿。他们不知道未来的命运，不知道沙克会与科比闹翻，不知道希尔把最好的年华献给了队医，不知道卡特有一天失去翅膀也会泯然众人，不知道马布里会被视为球队毒药，不知道麦迪会被带上“软”与“炸伤”的帽子，不知道AI有一天会流浪到土耳其，不知道未来的某一天，自己会成为时代的倒影。</p>
<p>那仅仅是2001年，那时的华盛顿是属于他们的舞台。<br>遥远的十年以前，轻狂的AI连走起路来都放荡不羁。那些个意气风发的少年，一张张微笑的脸，试图把这世界改变。<br>如果有十年前的照片，那一定已经泛黄。只有在比赛录像中，现场DJ充满激情的呼喊才依旧清晰，那些故人的笑容也依然明朗。那总会让我们产生错觉，闭上眼，仿佛一切发生在昨天。心微微的疼，因为那些人已不复当年。</p>
<p>那是场高低悬殊的比赛，至少东部七名队员身高都不足两米，所有人都觉得他们不够强壮，无法取得比赛的胜利。只是，AI与马布里联手向世界证明了，胜利与身体无关，与之有关的，只是——心！那颗为胜利而跳动的心脏。<br>于是造就了如此一场惊心动魄荡气回肠的比赛。看看今年的全明星，再与十年前做对比，你就会发现，一代人已经走向妥协，这个世界的反面英雄已经几乎绝迹。再也没有人会在落后二十几分时依旧骄傲的说我们会赢了；再也没有人可以那么勇敢地站在权威的背面了；再也没有人会玩世不恭地对这个世界竖起中指了。<br>十年过去了，那时叱咤风云的人物都离开了。<br>但使龙城飞将在，不教胡马度阴山。</p>
<p>但，当年轻的球员们看到阿伦艾弗森与世界为敌后的下场时，恐怕已经没有多少人愿意和他再走上同一条道路。那种坚持与忠诚，执着与顽强，反抗与斗争，那首属于英雄的赞歌再也不会在NBA响起了，这个世界也许还需要个人英雄主义，只是没有人愿意去做那个英雄了。<br>单挑篮球之神，全明星逆转，总决赛与繁华的洛杉矶为敌，纹身，嘻哈，垄沟头，轻描淡写，不爱训练，我行我素，史诗般的对决，胜利失败，爱与恨。<br>再也没有人可以承受这一切了。答案，真的无法被取代。<br>阿伦艾弗森走的，的确是一条前无古人后无来者的道路，因为再也没有人还有勇气如他一般。<br>单凭这一点，他所做的一切，就值得所有人，脱帽致敬。</p>
<p>所以，纵使上赛季被球队裁掉，老将底薪，球队备胎，依旧全明星。<br>你所做的事情，权威不喜欢，我们却深爱。<br>那些传奇，权威可以淡漠，我们却会铭记。<br>无论你是无限风光如日中天，还是黯然神伤举步维艰，我们都站在你的身后。<br>你是我们无法消散的光芒，<br>你是我们此生不变的信仰。</p>
<p>无论未来有多远，我们等你。</p>
<hr>
<h1 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h1><p>骄傲的狮子座,喜欢笑,喜欢明亮到刺眼的阳光,喜欢初春时节融化的冰雪，喜欢湛蓝色的天空，喜欢一生都在飞翔的北极燕鸥，喜欢伤感的文字,喜欢动人的故事,喜欢费城，此生挚爱 Allen Iverson。</p>
<h1 id="笔者附言"><a href="#笔者附言" class="headerlink" title="笔者附言"></a>笔者附言</h1><p>嘿嘿，偷偷搬运下！不要让原作者发现！(●’◡’●)【2016-11-22 16:10:55】</p>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2011/02/24/iverson-2001-2011/" title="与青春有关的日子（2001&2011）十年纪之全明星">与青春有关的日子（2001&2011）十年纪之全明星</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2011/02/24/iverson-2001-2011/" title="与青春有关的日子（2001&2011）十年纪之全明星">http://www.cylong.com/blog/2011/02/24/iverson-2001-2011/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>艾已成诗</category>
      </categories>
      <tags>
        <tag>艾弗森</tag>
        <tag>艾已成诗</tag>
        <tag>全明星</tag>
        <tag>流年</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + Git 搭建免费的个人博客</title>
    <url>/blog/2016/04/19/hexo-git/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>个人博客日益流行，大家都开始搭建自己的博客，记录成长中学习中的点点滴滴，最近觉得自己也需要有一个平台整理自己的所学所想，于是用了将近3天的时间 <del>(实际上一天就能搞定的！)</del> 使用 Hexo + Git 搭建了自己的个人博客，提高自己的学习动力，没事的时候可以拿出来温习下，提高下本人的渣渣水平。目前仍有很多功能没有添加，留着日后慢慢完善。准备将自己的第一篇博客献给 Hexo，表示对 Hexo 的感谢。下面详细介绍下搭建流程，有任何不懂的问题欢迎 <a href="/about/#联系我" title="联系我">联系我</a> 或者在下面评论。另外个人能力有限，接受任何建议或者吐槽！共同进步(●’◡’●)。</p>
<a id="more"></a>
<h1 id="Hexo-简介"><a href="#Hexo-简介" class="headerlink" title="Hexo 简介"></a>Hexo 简介</h1><p>大家所熟悉的博客框架莫过于 Wordpress，还有 Jekyll 等，博主在查阅了大量资料后选择了<a href="https://hexo.io/zh-cn/" title="Hexo" target="_blank" rel="noopener">Hexo</a>，Hexo 是一个快速、简洁且高效的博客框架。可以方便快捷的生成博客网页。Hexo由台湾大学生 <a href="http://twitter.com/tommy351" title="SkyArrow (@tommy351) | Twitter" target="_blank" rel="noopener">tommy351</a> 开发，是一个基于Node.js的静态博客程序。支持多种主题，博主选择的是 <a href="http://theme-next.iissnan.com/" title="Next" target="_blank" rel="noopener">Next</a> 主题。使用 Hexo + Git 搭建博客不需要购买域名和服务器，由 Github 提供域名和网站页面空间。</p>
<h1 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h1><p><b>注意:</b> 本文针对 <em>Windows</em> 平台和 <em>Hexo 3.x</em> 【其实后来我也在 Ubuntu 上试了一下，完全一样的】</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>在安装 Hexo 之前，请确认你已经安装了以下程序：</p>
<ul>
<li><a href="https://nodejs.org/zh-cn/" title="Node.js" target="_blank" rel="noopener">Node.js</a></li>
<li><a href="http://git-scm.com/" title="Git" target="_blank" rel="noopener">Git</a></li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在自己认为合适的地方创建一个文件夹作为博客项目的目录，进入文件夹，然后鼠标右键选择 <code>Git Bash Here</code>，依次输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">npm install hexo --save</span><br><span class="line">hexo -v <span class="comment"># 查看版本</span></span><br></pre></td></tr></table></figure>
<p>输入 <code>hexo -v</code> 后输出以下内容表示安装成功了(可能版本有差别)：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hexo -v</span><br><span class="line">hexo: 3.2.0</span><br><span class="line">hexo-cli: 1.0.1</span><br><span class="line">os: Windows_NT 10.0.10586 win32 x64</span><br><span class="line">http_parser: 2.5.2</span><br><span class="line">node: 4.4.2</span><br><span class="line">v8: 4.5.103.35</span><br><span class="line">uv: 1.8.0</span><br><span class="line">zlib: 1.2.8</span><br><span class="line">ares: 1.10.1-DEV</span><br><span class="line">icu: 56.1</span><br><span class="line">modules: 46</span><br><span class="line">openssl: 1.0.2g</span><br></pre></td></tr></table></figure>
<h2 id="体验-Hexo"><a href="#体验-Hexo" class="headerlink" title="体验 Hexo"></a>体验 Hexo</h2><p>接下来在当前的博客目录下，依次输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo init   <span class="comment"># 初始化组件</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>之后 npm 将会自动安装你需要的组件，只需要等待 npm 操作即可。接着输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<p>说明你的博客可以在本地访问啦，打开浏览器输入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 试试看吧~</p>
<h1 id="Hexo-使用"><a href="#Hexo-使用" class="headerlink" title="Hexo 使用"></a>Hexo 使用</h1><p>下面让我们创建第一篇文章吧，输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo n my-first   <span class="comment"># 生成文章，或者 source\_posts 手动编辑</span></span><br></pre></td></tr></table></figure>
<p>之后查看 <code>source\_posts</code> 下面就会出现 <code>my-first.md</code>， 编辑这个文件就是在编辑你的这篇博客，博客采用 md 文件编写。md 语法请参考：</p>
<blockquote>
<p><a href="http://wowubuntu.com/markdown/" title="Markdown 语法说明(简体中文版)" target="_blank" rel="noopener">Markdown 语法说明(简体中文版)</a></p>
</blockquote>
<p>完成保存后输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo g <span class="comment"># 生成 public 静态文件，这步不是必须的，当你需要生成的 Html 页面的时候输入这行代码</span></span><br><span class="line">hexo s <span class="comment"># 启动服务器，查看本地效果</span></span><br></pre></td></tr></table></figure>
<p>浏览器中输入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就会看到你刚刚编辑的博客了，如果发现无法访问的情况，可能是因为端口被占用或者你启用了代理【关掉就好】，运行如下命令修改端口：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo server -p 5000 <span class="comment"># 5000为你想要修改的端口号</span></span><br></pre></td></tr></table></figure>
<p>在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。更多博客编辑技巧请参照 <a href="https://hexo.io/zh-cn/docs/" title="Hexo 中文文档" target="_blank" rel="noopener">Hexo 中文文档</a></p>
<h1 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h1><h2 id="创建代码仓库"><a href="#创建代码仓库" class="headerlink" title="创建代码仓库"></a>创建代码仓库</h2><p>首先你需要一个 Github: <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a> 账号，然后创建一个仓库，仓库名是 <code>yourname.github.io</code>， 比如我的是 <code>cylong1016.github.io</code>。</p>
<h2 id="开启-gh-pages-功能"><a href="#开启-gh-pages-功能" class="headerlink" title="开启 gh-pages 功能"></a>开启 gh-pages 功能</h2><p>创建完成后点击界面右侧的 <code>Settings</code>，向下拖动，直到看见 <code>GitHub Pages</code> ，点击 <code>Automatic page generator</code>，Github 将会自动替你创建出一个 gh-pages 的页面。<br>如果你的配置没有问题，那么大约15分钟之后，<a href="http://cylong1016.github.io" target="_blank" rel="noopener">http://cylong1016.github.io</a> 这个网址就可以正常访问了~<br>之后打开本地博客目录下的 <code>_config.yml</code> 文件，最下面找到 <code>Deployment</code> ， 做如下修改：</p>
<pre><code>deploy:
  type: git
  repo: https://github.com/cylong1016/cylong1016.github.io.git
  # cylong1016改成你的用户名
  branch: master
</code></pre><p>接着在 Git Bash 中依次输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save    <span class="comment"># 安装使用 git 方式进行部署所需要的插件</span></span><br><span class="line">hexo d                <span class="comment"># 部署到 Github 上，按照提示输入自己 Github 的用户名和密码。</span></span><br></pre></td></tr></table></figure>
<p>部署会强制覆盖掉你之前生成的页面，在博客的目录下会产生 <code>.deploy_git</code>文件夹，不要删除，否则你的部署记录就会不见。之后就可以通过 <a href="http://cylong1016.github.io" target="_blank" rel="noopener">http://cylong1016.github.io</a> (cylong1016 替换成你的用户名)访问你的网站啦。在之后的部署时，建议输入以下代码:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo clean  <span class="comment"># 清除之前 public 文件夹的内容</span></span><br><span class="line">hexo g      <span class="comment"># 生成静态的 public 文件夹，部署时候也是直接拷贝此文件夹里的文件。</span></span><br><span class="line">hexo d      <span class="comment"># 部署到 Github 上，按照提示输入自己 Github 的用户名和密码。</span></span><br><span class="line"><span class="comment"># hexo g 和 hexo d 这两条命令可以合并成 hexo d --g 或者 hexo g --d</span></span><br></pre></td></tr></table></figure>
<h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>你可以在 <a href="https://hexo.io/themes/" title="Themes | Hexo" target="_blank" rel="noopener">Themes - Hexo</a> 找到你喜欢的主题下载下来，放在博客目录下的 <code>themes</code> 目录下，之后修改 <code>_config.yml</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next # 修改成你的主题文件夹名</span><br></pre></td></tr></table></figure>
<p>Hexo 默认主题是 landscape，我使用的是 Next 主题，也是强烈推荐的，简洁、扁平化主题风格是我最喜欢的。配置使用 Next 主题请参考：</p>
<blockquote>
<p><a href="http://theme-next.iissnan.com/" title="Next 主题中文文档" target="_blank" rel="noopener">Next 主题中文文档</a></p>
</blockquote>
<p>本来想单独写一个博客讲述主题方面的配置，不过这些都有官方文档，写的也都很详细，没必要做文章的搬运工(<del>明明是博主很懒！</del>)。如果有问题欢迎在下面提问(●’◡’●)</p>
<h1 id="使用自己的域名"><a href="#使用自己的域名" class="headerlink" title="使用自己的域名"></a>使用自己的域名</h1><h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p>首先你需要一个域名。个人比较推荐  <a href="https://sg.godaddy.com/zh/" title="买域名 | 世界最大域名注册商 — GoDaddy" target="_blank" rel="noopener">GoDaddy</a> 和 <a href="https://wanwang.aliyun.com/" title="域名注册_虚拟主机_云服务器_企业邮箱-万网-阿里云旗下品牌" target="_blank" rel="noopener">万网</a>，我的域名是在万网买的。【好不容易抢到 cylong.com 这个域名，之前被人注册了，不过在16年2月份的时候就过期了，哈哈哈】</p>
<h2 id="设置-CNAME"><a href="#设置-CNAME" class="headerlink" title="设置 CNAME"></a>设置 CNAME</h2><p>在博客目录下的 <code>source</code> 文件夹下，创建一个名称为 <code>CNAME</code> 的文件，内容为你的域名，比如我的是:</p>
<figure class="highlight plain"><figcaption><span>source/CNAME</span></figcaption><table><tr><td class="code"><pre><span class="line">www.cylong.com</span><br></pre></td></tr></table></figure>
<p><b>注意</b>： <em><code>CNAME</code> 文件是不带后缀的。另外带 www 和不带 www，虽然用户在访问的时候网页内容是一样的，但是搜索引擎却认为是两个网页，最好自己选择一个首选域。更多详情请参考：<a href="http://www.cylong.com/blog/2016/05/02/preferred-domain/" title="网站首选域 | 笑话人生">网站首选域</a></em></p>
<h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>简单来说就是让你的网站和你购买的域名对应起来。万网提供免费的 DNS 解析服务。也可以使用 <a href="https://www.dnspod.cn/" title="DNSPod-免费智能DNS解析服务商" target="_blank" rel="noopener">DNSPod</a> 的服务，但是要在域名注册商修改 DNS 服务地址为：</p>
<pre><code>f1g1ns1.dnspod.net
f1g1ns2.dnspod.net
</code></pre><p>我在万网购买的域名，所以直接进行解析配置【默认使用万网的 DNS 解析服务，没有使用 DNSPod 的服务】。配置过程如下：</p>
<ol>
<li>登陆 <a href="https://wanwang.aliyun.com/" title="域名注册_虚拟主机_云服务器_企业邮箱-万网-阿里云旗下品牌" target="_blank" rel="noopener">万网</a>。</li>
<li>点击最上面的 <code>管理控制台</code>，再点击左侧的 <code>云解析</code>。或者直接点击首页查询域名框下面的常用链接：<code>域名解析</code>。</li>
<li>选择你要解析的域名，点击域名后面的 <code>解析</code>。</li>
<li>解析配置如下【看不清图片可以点击放大】：</li>
</ol>
<p><img src="域名解析.png" alt="域名解析配置"></p>
<p>设置解析后大约几分钟就可以通过你的域名访问你的网站啦，如果你修改了 DNS 服务器，解析一般最长需要48小时生效。耐心等待吧~</p>
<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><blockquote>
<p><a href="https://xuanwo.org/2015/03/26/hexo-intor/" title="Xuanwo&#39;s Blog - 史上最详细的Hexo博客搭建图文教程" target="_blank" rel="noopener">Xuanwo’s Blog - 史上最详细的 Hexo 博客搭建图文教程</a><br><a href="http://wsgzao.github.io/post/hexo-guide/" title="HelloDog - 使用GitHub和Hexo搭建免费静态Blog" target="_blank" rel="noopener">HelloDog - 使用 GitHub 和 Hexo 搭建免费静态Blog</a><br><a href="http://www.paopaoche.net/jiaocheng/85988.html" title="潇潇 - 搭建hexo部署到github图文教程" target="_blank" rel="noopener">潇潇 - 搭建 hexo 部署到 github 图文教程</a></p>
</blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<p><a href="https://hexo.io/zh-cn/docs/" title="Hexo 中文文档" target="_blank" rel="noopener">Hexo 中文文档</a><br><a href="http://theme-next.iissnan.com/" title="Next 主题中文文档" target="_blank" rel="noopener">Next 主题中文文档</a><br><a href="http://wowubuntu.com/markdown/" title="Markdown 语法说明(简体中文版)" target="_blank" rel="noopener">Markdown 语法说明(简体中文版)</a><br><a href="http://www.cylong.com/categories/Hexo/" title="分类：Hexo | 笑话人生">分类：Hexo | 笑话人生</a></p>
</blockquote>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2016/04/19/hexo-git/" title="Hexo + Git 搭建免费的个人博客">Hexo + Git 搭建免费的个人博客</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2016/04/19/hexo-git/" title="Hexo + Git 搭建免费的个人博客">http://www.cylong.com/blog/2016/04/19/hexo-git/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>git</tag>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Atom 的炫酷插件 activate-power-mode</title>
    <url>/blog/2016/04/22/activate-power-mode/</url>
    <content><![CDATA[<hr>
<h1 id="Atom-简介"><a href="#Atom-简介" class="headerlink" title="Atom 简介"></a>Atom 简介</h1><p><a href="https://atom.io/" title="Atom" target="_blank" rel="noopener">Atom</a> 是一款免费的编辑器，我一般在写 Web 项目的时候使用。写 Java 项目用 Eclipse， 其他直接用 Notepad++，别问我为什么不用 Sublime。喜欢这款编辑器的主要原因是它的黑色扁平化主题风格非常炫酷，功能也比较强大，缺点就是比较吃内存，启动比较慢( ╯□╰ )。最近使用 Atom 写自己的博客【没错，就是现在这个博客】，想到了 <a href="https://github.com/JoelBesada/activate-power-mode" title="activate-power-mode" target="_blank" rel="noopener">activate-power-mode</a> 插件的炫酷效果，于是就体验了一下。下面介绍下详细安装过程。</p>
<a id="more"></a>
<h1 id="安装使用-activate-power-mode"><a href="#安装使用-activate-power-mode" class="headerlink" title="安装使用 activate-power-mode"></a>安装使用 activate-power-mode</h1><p>注意：本文针对 <em>Windows</em> 和 <em>Ubuntu</em> 平台，其他平台也差不多，自己琢磨吧~</p>
<p>先上图！</p>
<p><img src="activate-power-mode.gif" alt="activate-power-mode"></p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li><a href="https://atom.io/" title="Atom" target="_blank" rel="noopener">Atom</a></li>
<li><a href="https://github.com/JoelBesada/activate-power-mode" title="activate-power-mode" target="_blank" rel="noopener">activate-power-mode</a></li>
<li><a href="http://nodejs.org/" title="Node.js" target="_blank" rel="noopener">Node.js</a></li>
</ul>
<p>点击上面的三个链接，分别下载下来 Atom、activate-power-mode、Node.js，然后安装 Atom、Node.js。</p>
<ul>
<li>Windows：直接双击安装就可以。</li>
<li>Ubuntu： 运行 <code>sudo dpkg -i xxx-atom-xxx.deb</code> 安装 Atom。</li>
</ul>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>解压下载下来的 activate-power-mode zip 包，移动到 <code>~\.atom\packages</code> 下，比如 Windows 是  <code>C:\Users\cylong\.atom\packages</code> ，Ubuntu 是 <code>home/cylong/.atom/packages</code>，接下来进入到 <code>activate-power-mode</code> 目录下，打开终端，输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install <span class="comment"># 安装必要的 module</span></span><br></pre></td></tr></table></figure>
<p>之后重启 Atom ，使用右键选择 <code>Toggle</code> 或者 <code>Ctrl ＋ Alt ＋ O</code> 就启动插件了，体验炫酷的效果吧！</p>
<h2 id="插件设置"><a href="#插件设置" class="headerlink" title="插件设置"></a>插件设置</h2><p>刚开始用的时候感觉蛮好玩的，非常爽。然后用了不到一分钟，我就觉得眼睛要瞎了！估计在玩个几分钟就真的瞎了！！屏幕震动效果闪瞎我的双眼！要是能够把震动效果删除会不会好一点？于是自己开始找这个插件的设置，果然有！</p>
<ul>
<li>首先点击 Atom 左上角的 <code>File</code> 按钮，Ubuntu 是 <code>Edit</code></li>
<li>Windows 进入到 <code>Settings</code>，Ubuntu 是 <code>Preferences</code></li>
<li>找到 <code>packages</code> 设置</li>
<li>找到  <code>activate-power-mode</code></li>
<li>进入到  <code>Settings</code></li>
<li>找到 <code>Screen Shake - Enable</code>， 将前面的 √ 去掉</li>
</ul>
<p>之后就只有颗粒效果啦，现在感觉好多了吧(●’◡’●)。插件设置中还有颗粒大小的设置，自己根据需要修改吧~</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>把屏幕震动效果关掉后感觉好很多了。也一直在用这个效果，感觉还是蛮帅的~不过，如果一行中字符太多，Atom 会自动换行显示，但是这些字符还是在同一行的，这个时候这个插件产生的效果就会错位，就是产生的颗粒不是在当前输入的字符位置，目前我还没解决 ( ╯□╰ )，谁有好的解决办法欢迎联系我。另外，如果读者有更好的 Atom 插件或者使用技巧，欢迎留言或者 <a href="/about/#联系我" title="联系我">联系我</a>。最后推荐下自己比较喜欢的编辑器 <a href="https://atom.io/" title="Atom" target="_blank" rel="noopener">Atom</a> 吧 (●’◡’●)</p>
<h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><p><strong>2016-05-15 更新</strong><br>这个插件的作者是比较良心的，修复了 Atom 自动换行后，插件产生的颗粒位置错位的 BUG。现在一直在用这个插件，写代码越来越有激情了呢 o(^▽^)o</p>
<p><strong>2016-06-01 更新</strong><br>我有点傻了( ╯□╰ )，我发现直接进入到 <code>Preferences(首选项)-&gt; install(安装)</code>，就可以直接安装 activate-power-mode 插件了。</p>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2016/04/22/activate-power-mode/" title="Atom 的炫酷插件 activate-power-mode">Atom 的炫酷插件 activate-power-mode</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2016/04/22/activate-power-mode/" title="Atom 的炫酷插件 activate-power-mode">http://www.cylong.com/blog/2016/04/22/activate-power-mode/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>Atom</category>
      </categories>
      <tags>
        <tag>atom</tag>
        <tag>插件</tag>
        <tag>ubuntu</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 使用总结 &amp; 常见问题</title>
    <url>/blog/2016/04/25/hexo-faq/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Hexo 是一个非常简洁的静态博客框架，可以快速的搭建生成自己的博客，但是在使用中总会遇到各种各样奇怪的错误，在这里我整理一下我所遇到的错误和一些使用技巧等等，也欢迎各位读者对使用技巧和使用问题进行补充。如果有什么问题也可以随时在下方提问。</p>
<p><strong>注意：</strong></p>
<ol>
<li><code>_config.yml</code> 文件在项目下有两个，一个在主题目录下，一个在博客根目录下。我在文中会说明是哪个文件。</li>
<li>本博客使用的是 Next 主题，某些设置可能与主题有关。</li>
</ol>
<a id="more"></a>
<h1 id="让-Hexo-不渲染-md-或者-html"><a href="#让-Hexo-不渲染-md-或者-html" class="headerlink" title="让 Hexo 不渲染 .md 或者 .html"></a>让 Hexo 不渲染 .md 或者 .html</h1><p>我们知道，在 source 文件夹下的所有 md 文件或者 html 文件都会被渲染，有时候我们不想这些文件被渲染怎么办？比如很多时候我们想要写一个 README.md 或者一些自定义的页面。比如百度或者谷歌在验证站长权限的时候，通常都会要求在主目录下添加一个 html 文件。</p>
<h2 id="不渲染-html-文件"><a href="#不渲染-html-文件" class="headerlink" title="不渲染 html 文件"></a>不渲染 html 文件</h2><p>在不想被渲染的 html 文件最上面添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h2 id="不渲染-md-文件"><a href="#不渲染-md-文件" class="headerlink" title="不渲染 md 文件"></a>不渲染 md 文件</h2><p>使用上面的办法虽然不会渲染 md 文件，但是还是将 md 文件转化成了 html 文件，如果想保留原 md 文件后缀要怎么做呢？这就需要在 <code>站点配置文件</code> <code>_config.yml</code> 中配置，找到 <code>skip_render</code> 参数，开始匹配的位置是基于你的 <code>source_dir</code> 的，一般来说，是你的 <code>source</code> 文件夹下。下面我分别列举几种常见的情况进行说明：</p>
<ol>
<li><code>skip_render: test/*</code>    单个文件夹下全部文件</li>
<li><code>skip_render: test/*.md</code> 单个文件夹下指定类型文件</li>
<li><code>skip_render: test/**</code>   单个文件夹下全部文件以及子目录</li>
<li>多个文件夹以及各种复杂情况：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">skip_render:</span><br><span class="line">  - `test1/*.html`</span><br><span class="line">  - `test2/**`</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="首页文章显示查看原文按钮"><a href="#首页文章显示查看原文按钮" class="headerlink" title="首页文章显示查看原文按钮"></a>首页文章显示查看原文按钮</h1><p>我们常常想在首页只显示文章的概述，而不是文章的全部，用一个 <code>阅读全文</code> 的字样代替，要怎么做呢？如下图：</p>
<p><img src="阅读全文.png" alt="阅读全文样例"></p>
<p>在文章中只要写成如下格式即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是摘要</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line">这是全文</span><br></pre></td></tr></table></figure>
<p>需要注意的是，点击 <code>阅读全文</code> 之后，文章会自动定位到 <code>&lt;!-- more --&gt;</code> 所在位置，想要修改成从头阅读需要修改<code>主题配置文件</code> <code>_config.yml</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Automatically scroll page to section which is under &lt;!-- more --&gt; mark.</span><br><span class="line">scroll_to_more: false</span><br></pre></td></tr></table></figure>
<h1 id="部署到-Github-后，部分修改未更新"><a href="#部署到-Github-后，部分修改未更新" class="headerlink" title="部署到 Github 后，部分修改未更新"></a>部署到 Github 后，部分修改未更新</h1><p>有时候当你 <code>hexo d --g</code> 部署到 Github 的时候，发现有些地方并没有更新，比如你的主题样式。这时候就建议你输入 <code>hexo clean</code> 清除下 public 文件夹下的文件，然后再部署【部署的时候实际上是直接拷贝 public 下的文件的】。另外多说一句，<code>hexo d --g</code> 是以下两个命令的缩写：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo g  <span class="comment"># 生成本地 public 静态文件</span></span><br><span class="line">hexo d  <span class="comment"># 部署到 Github 上</span></span><br><span class="line"><span class="comment"># 也可以缩写成：hexo g --d</span></span><br></pre></td></tr></table></figure>
<h1 id="Hexo-使用-Fort-Awesome-图标"><a href="#Hexo-使用-Fort-Awesome-图标" class="headerlink" title="Hexo 使用 Fort Awesome 图标"></a>Hexo 使用 Fort Awesome 图标</h1><p>我们知道，在我们写博客的时候，博客文件，或者自己自定义的页面，比如关于页面，都是 md 文件。最后会转化成 Html 文件。但是所支持的标签还是没有 Html 的全面，不过我们可以直接在 md 文件中写 Html 标签，比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>你什么都没有看见<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当然，你可以直接使用 <a href="https://fortawesome.github.io/Font-Awesome/icons/" title="Font Awesome icons" target="_blank" rel="noopener">Fort Awesome</a> 图标，下面是我在 <a href="http://www.cylong.com/about/#联系我" title="关于 - 联系我">关于</a> 页面写的代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 联系我</span><br><span class="line"></span><br><span class="line">如果有志同道合的小伙伴，或者想找个基友什么的，欢迎联系！</span><br><span class="line"></span><br><span class="line">*   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"fa fa-envelope"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> Email: cyl19941016@sina.com</span><br><span class="line">*   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"fa fa-qq"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> QQ: 948557407</span><br><span class="line">*   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"fa fa-wechat"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 微信：cyl19941016</span><br></pre></td></tr></table></figure>
<h1 id="配置-SSH-公钥免去部署的时候输入密码"><a href="#配置-SSH-公钥免去部署的时候输入密码" class="headerlink" title="配置 SSH 公钥免去部署的时候输入密码"></a>配置 SSH 公钥免去部署的时候输入密码</h1><figure class="highlight sh"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo:</span><br><span class="line">    github: git@github.com:cylong1016/cylong1016.github.io.git <span class="comment"># Github SSH</span></span><br><span class="line">    <span class="comment"># github: https://github.com/cylong1016/cylong1016.github.io.git # Github HTTPS</span></span><br><span class="line">    coding: git@git.coding.net:cylong1016/cylong1016.git <span class="comment"># Coding SSH</span></span><br><span class="line">    <span class="comment"># coding: https://git.coding.net/cylong1016/cylong1016.git # Coding HTTPS</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>上面的代码是 _config.yml 中部署的代码，分别是部署到 Github 和 Coding 上的两种方式，使用 HTTPS 方式的话每次部署都需要输入用户名和密码，很麻烦。<br><img src="OpenSSH.png" alt="OpenSSH"><br>所以我选择使用 SSH 的方式，此方式是本机与远程仓库建立对接，这样部署的时候就不需要输入用户名和密码了。但是需要以下的配置：</p>
<p>打开终端或者 Git Bash，依次输入：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir ~/.ssh    <span class="comment"># 如果之前没有这个文件夹就创建此文件夹</span></span><br><span class="line"><span class="built_in">cd</span> ~/.ssh       <span class="comment"># 进入到 .ssh 文件夹中</span></span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span>    <span class="comment"># 生成密钥</span></span><br><span class="line"><span class="comment"># 接着会提示输入 file 和 passphrase，直接回车就行。</span></span><br><span class="line"><span class="comment"># 接着会看到下面的输出：</span></span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /home/cylong/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /home/cylong/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">fd:56:db:23:db:bf:df:54:0a:6a:43:51:13:34:22:b6 youremail@example.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接着输入</span></span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><br>然后打开 <a href="https://github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/settings/ssh</a>【Github】，点击 <code>New SSH key</code>，复制 <code>id_rsa.pub</code> 中的所有内容到 Key 框中，在 Title 框中输入方便自己记忆的名字【比如我的是 Personal Ubuntu】。<a href="https://coding.net/user/account/setting/keys" target="_blank" rel="noopener">https://coding.net/user/account/setting/keys</a>【Coding】也一样，但是需要注意的是注册邮箱要一样，否则要两个 SSH。最后输入 <code>ssh -T git@github.com</code> 和 <code>ssh -T git@git.coding.net</code> 测试是否配置成功。</p>
<h1 id="Ubuntu-下使用-Hexo"><a href="#Ubuntu-下使用-Hexo" class="headerlink" title="Ubuntu 下使用 Hexo"></a>Ubuntu 下使用 Hexo</h1><p>辗转反侧，还是忍不住使用 Ubuntu 系统。而且基本所有的人都和我说以后的开发都要使用 Linux 系统。所以最近准备使用 Ubuntu 练手，当然，博客也要在 Ubuntu 上更新了。由于我的博客已经在 Windows 系统下搭建好了，教程参考 <a href="http://www.cylong.com/blog/2016/04/19/hexo-git/" title="Hexo + Git 搭建免费的个人博客 | 笑话人生">Hexo + Git 搭建免费的个人博客 | 笑话人生</a> 【虽然是 Windows 下的教程，但是其他平台步骤都是一样的】。Hexo 源码放在 <a href="https://github.com/cylong1016/HexoBlog" title="HexoBlog" target="_blank" rel="noopener">Github - HexoBlog</a> 上。所以直接 clone 下来就好。下面就说说我在 Ubuntu 系统下遇到的问题。</p>
<ol>
<li><p>在执行 npm 命令时出现以下错误：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sh: 1: node: not found</span><br><span class="line">npm WARN This failure might be due to the use of legacy binary <span class="string">"node"</span></span><br><span class="line">npm WARN For further explanations, please <span class="built_in">read</span></span><br><span class="line">/usr/share/doc/nodejs/README.Debian</span><br></pre></td></tr></table></figure>
<p>解决办法，执行以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs-legacy</span><br></pre></td></tr></table></figure>
<p>详情请参考：</p>
<blockquote>
<p><a href="http://stackoverflow.com/questions/21168141/cannot-install-packages-using-node-package-manager-in-ubuntu" target="_blank" rel="noopener">http://stackoverflow.com/questions/21168141/cannot-install-packages-using-node-package-manager-in-ubuntu</a></p>
<p><a href="http://stackoverflow.com/questions/20057790/what-are-the-differences-between-node-js-and-node" target="_blank" rel="noopener">http://stackoverflow.com/questions/20057790/what-are-the-differences-between-node-js-and-node</a></p>
<p><a href="https://github.com/hexojs/hexo/issues/580" target="_blank" rel="noopener">https://github.com/hexojs/hexo/issues/580</a></p>
</blockquote>
</li>
<li><p>执行 hexo 命令时出现以下错误：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">FATAL Cannot find module <span class="string">'/home/cylong/Github/HexoBlog/node_modules/hexo-deployer-git'</span></span><br></pre></td></tr></table></figure>
<p>原因是没有 hexo-deployer-git module。执行以下命令安装：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以正常执行 hexo 命令，但是会出现下面的警告：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Native thread-sleep not available.</span><br><span class="line">This will result <span class="keyword">in</span> much slower performance, but it will still work.</span><br><span class="line">You should re-install spawn-sync or upgrade to the lastest version of node <span class="keyword">if</span> possible.</span><br><span class="line">Check /usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/error.log <span class="keyword">for</span> more details</span><br></pre></td></tr></table></figure>
<p>解决办法如上警告所说，升级 node.js。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo npm cache clean -f</span><br><span class="line">sudo npm install -g n</span><br><span class="line">sudo n stable</span><br></pre></td></tr></table></figure>
<p>详情请参考：</p>
<blockquote>
<p><a href="http://stackoverflow.com/questions/8191459/how-to-update-node-js" target="_blank" rel="noopener">http://stackoverflow.com/questions/8191459/how-to-update-node-js</a></p>
</blockquote>
</li>
<li><p>执行 <code>hexo g</code> 无法部署到 Github 上，出现如下错误：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Permission denied (publickey).</span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">FATAL Something<span class="string">'s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span></span><br><span class="line"><span class="string">Error: Permission denied (publickey).</span></span><br><span class="line"><span class="string">fatal: Could not read from remote repository.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Please make sure you have the correct access rights</span></span><br><span class="line"><span class="string">and the repository exists.</span></span><br></pre></td></tr></table></figure>
<p>解决办法，请参考：</p>
</li>
</ol>
<blockquote>
<p><a href="/blog/2016/04/25/hexo-faq/#配置-SSH-公钥免去部署的时候输入密码" title="配置 SSH 公钥免去部署的时候输入密码">配置 SSH 公钥免去部署的时候输入密码</a></p>
</blockquote>
<h1 id="添加-RSS-订阅"><a href="#添加-RSS-订阅" class="headerlink" title="添加 RSS 订阅"></a>添加 RSS 订阅</h1><ol>
<li><p>安装 Feed 插件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置站点目录下的 <code>_config.yml</code> 文件，添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">feed:</span><br><span class="line">    type: atom</span><br><span class="line">    path: atom.xml</span><br><span class="line">    limit: 20</span><br><span class="line">    hub:</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>type - 订阅类型 (atom 或 rss2)</li>
<li>path - 路径 (默认: atom.xml 或 rss2.xml)</li>
<li>limit - 最多显示文章数量 (0 或 false 展示所有文章)</li>
<li>hub - PubSubHubbub hubs 的 URL (PubSubHubbub 是一个“开放的、服务器对服务器、基于Web-hook的发布/订阅协议，是 Atom 和 RSS 的扩展”。不使用就留空)</li>
</ul>
<h1 id="网站底部字数统计"><a href="#网站底部字数统计" class="headerlink" title="网站底部字数统计"></a>网站底部字数统计</h1><ol>
<li><p>安装 hexo-wordcount 插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>/themes/next/layout/_partials/footer.swig</code> 中最后加上:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"theme-info"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"powered-by"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span>博客共&#123;&#123; totalcount(site) &#125;&#125;字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>参考：<a href="https://www.npmjs.com/package/hexo-wordcount" title="hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a></p>
</li>
</ol>
<h1 id="LF-will-be-replaced"><a href="#LF-will-be-replaced" class="headerlink" title="LF will be replaced"></a>LF will be replaced</h1><p>Windows 提交命令的时候出现 <code>warning: LF will be replaced by CRLF in xxx</code> 的警告。输入以下命令即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure>
<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><blockquote>
<p><a href="https://xuanwo.org/2014/08/14/hexo-usual-problem/" title="Xuanwo&#39;s Blog - Hexo常见问题解决方案" target="_blank" rel="noopener">Xuanwo’s Blog - Hexo常见问题解决方案</a><br><a href="https://xuanwo.org/2015/02/07/generate-a-ssh-key/" title="Xuanwo&#39;s Blog - 使用Github SSH Key以免去Hexo部署时输入密码" target="_blank" rel="noopener">Xuanwo’s Blog - 使用Github SSH Key以免去Hexo部署时输入密码</a><br><a href="http://www.arao.me/2015/hexo-next-theme-optimize-seo/" title="动动手指，不限于NexT主题的Hexo优化（SEO篇） | ARAO&#39;S BLOG" target="_blank" rel="noopener">动动手指，不限于NexT主题的Hexo优化（SEO篇） | ARAO’S BLOG</a><br><a href="https://zingss.github.io/" title="生生之境" target="_blank" rel="noopener">生生之境</a> 提出的各种【高智商(●’◡’●)】问题<br><a href="http://latias94.github.io/2016/09/30/Hexo-patch/" title="Hexo 博客补丁 - 萤火之森" target="_blank" rel="noopener">Hexo 博客补丁 - 萤火之森</a><br><a href="http://blog.tangxiaozhu.com/p/45374067/" title="使用 Hexo 搭建博客的深度优化与定制 - 唐小筑" target="_blank" rel="noopener">使用 Hexo 搭建博客的深度优化与定制 - 唐小筑</a><br><a href="https://segmentfault.com/a/1190000004548638" title="hexo同时托管到coding.net与github - shomy" target="_blank" rel="noopener">hexo同时托管到coding.net与github - shomy</a></p>
</blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<p><a href="http://www.cylong.com/blog/2016/04/19/hexo-git/" title="Hexo + Git 搭建免费的个人博客 | 笑话人生">Hexo + Git 搭建免费的个人博客 | 笑话人生</a><br><a href="https://hexo.io/zh-cn/" title="Hexo 中文文档" target="_blank" rel="noopener">Hexo 中文文档</a> 【包涵：文档、API、插件、主题】<br><a href="http://theme-next.iissnan.com/" title="Next 使用文档" target="_blank" rel="noopener">Next 使用文档</a> 【包含：开始使用、主题配置、第三方服务、内建标签、常见问题】<br><a href="https://github.com/hexojs/hexo-generator-feed" title="Feed generator for Hexo" target="_blank" rel="noopener">Feed generator for Hexo</a><br><a href="https://www.npmjs.com/package/hexo-wordcount" title="hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a></p>
</blockquote>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2016/04/25/hexo-faq/" title="Hexo 使用总结 & 常见问题">Hexo 使用总结 & 常见问题</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2016/04/25/hexo-faq/" title="Hexo 使用总结 & 常见问题">http://www.cylong.com/blog/2016/04/25/hexo-faq/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>网站首选域</title>
    <url>/blog/2016/05/02/preferred-domain/</url>
    <content><![CDATA[<hr>
<h1 id="什么是首选域"><a href="#什么是首选域" class="headerlink" title="什么是首选域"></a>什么是首选域</h1><p>当我们在访问一个网站的时候，使用 <a href="http://www.cylong.com">http://www.cylong.com</a> 和 <a href="http://cylong.com" target="_blank" rel="noopener">http://cylong.com</a> 访问网站，获得的内容并没有区别。对于用户来说，带 www 和不带 www 访问是一样的，但是对于搜索引擎就不一样了，两种域会被视为不同的网页，使得权重分散。Google 解释如下：</p>
<blockquote><p>首选网域是您希望 Google 用来将您的网页编入索引的网域（有时也称为规范网域）。指向您网站的链接可能会同时使用 www 版和非 www 版网址（例如，<a href="http://www.example.com" target="_blank" rel="noopener">http://www.example.com</a> 和 <a href="http://example.com" target="_blank" rel="noopener">http://example.com</a>）。首选域是您希望 Google 用来在搜索结果中显示您网站的版本。</p>
<footer><strong>Search Console帮助</strong><cite><a href="https://support.google.com/webmasters/answer/44231" target="_blank" rel="noopener">设置您的首选网域（www 版网址或非 www 版网址）</a></cite></footer></blockquote>
<a id="more"></a>
<h1 id="设置首选域"><a href="#设置首选域" class="headerlink" title="设置首选域"></a>设置首选域</h1><h2 id="使用-Google-Search-Console-设置"><a href="#使用-Google-Search-Console-设置" class="headerlink" title="使用 Google Search Console 设置"></a>使用 Google Search Console 设置</h2><p><b>注意：</b> <em>此方式仅适合 Google</em></p>
<ol>
<li>点击 <a href="https://www.google.com/webmasters/" title="Google 网站站长" target="_blank" rel="noopener">Google 网站站长</a>，然后点击首页的 <code>SEARCH CONSOLE</code>。</li>
<li>登陆后，点击想设置首选域的网站（没有网站就添加下）。</li>
<li>点击右上角的齿轮设置图标 <span class="fa fa-cog" aria-hidden="true"></span>，然后点击 <code>网站设置</code>。</li>
<li>选择对应的首选域。</li>
</ol>
<h2 id="使用-301-重定向"><a href="#使用-301-重定向" class="headerlink" title="使用 301 重定向"></a>使用 301 重定向</h2><p>为了使其他搜索引擎和访问者都采用你的首选版本，建议你使用 301 重定向对你的非首选网域的访问重定向到首选网域。在 <code>.htaccess</code> 文件里添加如下代码（要针对托管在运行 Apache 的服务器上的网站实施 301 重定向，你需要有访问权限，日后可能会写什么是 <code>.htaccess</code> 文件，先挖个坑）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond %&#123;http_host&#125; ^cylong.com [NC]</span><br><span class="line">RewriteRule ^(.*)$ http://www.cylong.com/$1 [L,R=301]</span><br></pre></td></tr></table></figure>
<p>使访问 <a href="http://cylong.com" target="_blank" rel="noopener">http://cylong.com</a> 的时候就会自动转到 <a href="http://www.cylong.com">http://www.cylong.com</a>。</p>
<h2 id="Hexo-博客框架设置首选域"><a href="#Hexo-博客框架设置首选域" class="headerlink" title="Hexo 博客框架设置首选域"></a>Hexo 博客框架设置首选域</h2><p>我的博客是由 <a href="https://hexo.io/zh-cn/" title="Hexo" target="_blank" rel="noopener">Hexo</a> 搭建的。没有部署到一个 Apache 服务器上，所以上面的设置方法就没用了。博客源码由 Hexo 生成，部署在 <a href="https://github.com/cylong1016/cylong1016.github.io" target="_blank" rel="noopener">Github</a> 上。如何搭建 Hexo 博客请参考：</p>
<blockquote>
<p><a href="http://www.cylong.com/blog/2016/04/19/hexo-git/" title="Hexo + Git 搭建免费的个人博客">Hexo + Git 搭建免费的个人博客</a> 。</p>
</blockquote>
<p>如果你使用的是 GitHub 提供的域名，比如我的是 <a href="http://cylong1016.github.com" target="_blank" rel="noopener">http://cylong1016.github.com</a>。就不需要往下看了，如果你使用的是自己购买的域名，则只需要在 CNAME 中填写你所希望的首选域就可以了，比如我的是:</p>
<figure class="highlight plain"><figcaption><span>CNAME</span></figcaption><table><tr><td class="code"><pre><span class="line">www.cylong.com</span><br></pre></td></tr></table></figure>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>当你确定你的首选域之后，在以后的 SEO 工作中，比如友情链接、链接推广时，都要采用你设置的首选域。</p>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2016/05/02/preferred-domain/" title="网站首选域">网站首选域</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2016/05/02/preferred-domain/" title="网站首选域">http://www.cylong.com/blog/2016/05/02/preferred-domain/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>apache</tag>
        <tag>seo</tag>
        <tag>301重定向</tag>
        <tag>htaccess</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache 如何设置 404 错误页面</title>
    <url>/blog/2016/04/29/apache-404/</url>
    <content><![CDATA[<hr>
<p>当我们浏览网站的时候，有时候会发现访问的页面不存在了，页面会有“你访问的页面不存在了，跳转到主页”或者“404 Not Found”等等的提示。我们通常称之为 404 页面。所谓的 404 页面就是当用户输入一个错误或非存在的链接时，显示的一个页面。当 Web 服务器接到类似请求时，会返回一个 404 状态码，告诉浏览器要请求的资源并不存在。显示的 404 页面主要作用是告诉用户，你输入的网址多请求的页面是不存在的或者是一个错误的链接，引导用户进入网站的其他页面。但是 Web 的默认 404 页面非常的简陋，对用户很不友好，这就需要我们自己定义个性化的 404 页面，提升用户体验。</p>
<a id="more"></a>
<h1 id="Apache-设置-404-错误页面"><a href="#Apache-设置-404-错误页面" class="headerlink" title="Apache 设置 404 错误页面"></a>Apache 设置 404 错误页面</h1><p>在 <code>.htaccess</code> 文件中加入代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ErrorDocument 404 /404.html</span><br></pre></td></tr></table></figure></p>
<p>之后在网站根目录建立一个 <code>404.html</code> 文件，编写你的 404 页面。</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>不要将 404 页面直接指向到网站主页，这可能导致你的首页不被搜索引擎收录。</li>
<li>/404.html 不要带域名，比如(错误写法：<a href="http://www.cylong.com/404.html">http://www.cylong.com/404.html</a>)，否则返回的状态码不是 404，而是 302、200。</li>
</ul>
<h1 id="SEO-搜索引擎优化"><a href="#SEO-搜索引擎优化" class="headerlink" title="SEO(搜索引擎优化)"></a>SEO(搜索引擎优化)</h1><p>404 状态码对搜索引擎是非常重要的。需要注意的是，有时候我们看到一个 404 的错误页面，但返回的状态码可能并不是 404。用户并不会关心状态码是多少，但是对于搜索引擎就不一样了。当搜索引擎获取到404 状态码，就表示此 URL 已经失效，页面已经不存在了。搜索引擎就不会索引这个页面，并且删除数据库中的索引。若返回的是 200，搜索引擎就会对此 URL 建立索引，这样就会产生多个不同的 URL 具有相同的页面内容，搜索引擎就认为你的网站有大量重复的内容，可能会被降权。</p>
<p>所以当我们自定义错误页面的时候，一定要保证状态码也是 404，不仅要对用户友好，也要对搜索引擎友好。</p>
<h1 id="参考资料-amp-感谢"><a href="#参考资料-amp-感谢" class="headerlink" title="参考资料&amp;感谢"></a>参考资料&amp;感谢</h1><blockquote>
<p><a href="http://bbs.20z.com/thread-5162-1-1.html" title="网站如何设置404页面，什么是404错误，404页面代码怎么写" target="_blank" rel="noopener">网站如何设置404页面，什么是404错误，404页面代码怎么写</a><br><a href="http://www.yzznl.cn/archives/19.html" title="园子博客 - 如何设置404页面" target="_blank" rel="noopener">园子博客 - 如何设置404页面</a></p>
</blockquote>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2016/04/29/apache-404/" title="Apache 如何设置 404 错误页面">Apache 如何设置 404 错误页面</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2016/04/29/apache-404/" title="Apache 如何设置 404 错误页面">http://www.cylong.com/blog/2016/04/29/apache-404/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>apache</tag>
        <tag>seo</tag>
        <tag>htaccess</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2 参数依赖注入失败</title>
    <url>/blog/2016/05/10/struts2-jsp-param/</url>
    <content><![CDATA[<hr>
<p>这是在 <a href="https://segmentfault.com/" title="SegmentFault" target="_blank" rel="noopener">SegmentFault</a> 上看到的一个问题，正好前不久学习了 J2EE 的 SSH 框架，看到这个问题忍不住答了一下。结果问题并不像表面上那么简单。没办法，自己挖的坑，跪着也要填完( ▼-▼ )。原问题链接：</p>
<blockquote>
<p><a href="https://segmentfault.com/q/1010000005088213/a-1020000005088292" title="struct2框架jsp页面传参失败" target="_blank" rel="noopener">struct2框架jsp页面传参失败</a></p>
</blockquote>
<a id="more"></a>
<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>和提问者要了源码，方便查找BUG。源代码太长，我就截取了部分代码。</p>
<figure class="highlight html"><figcaption><span>addFlower.jsp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:form</span> <span class="attr">action</span>=<span class="string">"addFlower"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"380"</span> &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">td</span>&gt;</span>鲜花ID：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">id</span>=<span class="string">"goodsId"</span> <span class="attr">name</span>=<span class="string">"goods.goodsId"</span>/&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"添加"</span> <span class="attr">class</span>=<span class="string">"btn"</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><figcaption><span>struts.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"flowers"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"addFlower"</span> <span class="attr">class</span>=<span class="string">"flowers"</span> <span class="attr">method</span>=<span class="string">"addFlowerInfo"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"index"</span>&gt;</span>/flowerInformation/flowerInformation.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><figcaption><span>applicationContext.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"adminUser"</span> <span class="attr">class</span>=<span class="string">"com.xhydxs.action.AdminUserAction"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminUserBiz"</span> <span class="attr">ref</span>=<span class="string">"adminUserBiz"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"flowers"</span> <span class="attr">class</span>=<span class="string">"com.xhydxs.action.FlowerAction"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"flowerBiz"</span> <span class="attr">ref</span>=<span class="string">"flowerBiz"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>FlowerAction.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">RequestAware</span>, <span class="title">SessionAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Goods goods;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Goods <span class="title">getGoods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> goods;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGoods</span><span class="params">(Goods goods)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.goods = goods;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addFlowerInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"goods:"</span> + goods);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>基本上看这些代码是完全正确的啊，并没有什么错误【后来证明确实也没有错误( ╯□╰ )】。拿到项目代码的我运行了下【运行前由于环境不同，我配置了好久啊啊啊啊！】，输出一直是 <code>goods:null</code>。这我就非常奇怪了，和之前写的 J2EE 项目对比了下，套路都是一样的啊！后来我发现了上面的一堆错误信息【为什么不早点看这些错误信息呢】，基本上都是围绕着下面这个错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Caused by: java.lang.IllegalStateException: Cannot convert value of type [com.xhydxs.action.AdminUserAction] to required type [com.xhydxs.entity.AdminUser] for property &apos;adminUser&apos;: no matching editors or conversion strategy found</span><br></pre></td></tr></table></figure>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>可以发现是类型转化问题，为什么会让 AdminUserAction 转化成 AdminUser 呢？这两个类怎么会互相转化呢？于是我使用全局查找 AdminUserAction 和 AdminUser 这两个关键词【用 Atom 编辑器】。终于让我发现以下的代码！！！</p>
<figure class="highlight xml"><figcaption><span>applicationContext.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"adminUser"</span> <span class="attr">class</span>=<span class="string">"com.xhydxs.action.AdminUserAction"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminUserBiz"</span> <span class="attr">ref</span>=<span class="string">"adminUserBiz"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><figcaption><span>Goods.hbm.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"adminUser"</span> <span class="attr">class</span>=<span class="string">"com.xhydxs.entity.AdminUser"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">fetch</span>=<span class="string">"select"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"UPD_OPR"</span> <span class="attr">length</span>=<span class="string">"20"</span> <span class="attr">not-null</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">many-to-one</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>发现了么？name 都是 adminUser，然而 class 分别对应着 AdminUserAction 和 AdminUser。然后把 AdminUserAction 对应的 name 改掉就行了。。。。至于为什么上面这个错误会导致 goods 为 null，因为在 Goods 类里有一个 AdminUser 成员变量，导致 struts 没法构建 goods 这个实例了&gt;3&lt;</p>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2016/05/10/struts2-jsp-param/" title="Struts2 参数依赖注入失败">Struts2 参数依赖注入失败</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2016/05/10/struts2-jsp-param/" title="Struts2 参数依赖注入失败">http://www.cylong.com/blog/2016/05/10/struts2-jsp-param/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>java</tag>
        <tag>jsp</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 集成多说评论 + 多说分享 + 美化多说</title>
    <url>/blog/2016/04/25/hexo-next-duoshuo/</url>
    <content><![CDATA[<hr>
<h1 id="多说简介"><a href="#多说简介" class="headerlink" title="多说简介"></a>多说简介</h1><p>多说是一款追求极致体验的社会化评论框，可以用微博、QQ、人人、豆瓣等帐号登录并评论。功能强大且永久免费。Hexo 默认使用的评论插件是国外的 Disqus，。对于国内来说，使用多说无非是最好的。这篇文章就介绍下如何在 Hexo 中添加多说评论插件和多说 CSS 的美化，顺便说一下多说分享插件。至于如何搭建 Hexo 博客请参考：</p>
<blockquote>
<p><a href="http://www.cylong.com/blog/2016/04/19/hexo-git/" title="Hexo + Git 搭建免费的个人博客">Hexo + Git 搭建免费的个人博客</a> </p>
</blockquote>
<a id="more"></a>
<h1 id="集成多说"><a href="#集成多说" class="headerlink" title="集成多说"></a>集成多说</h1><p><b>注意:</b> <em>我使用的是 Next 主题，集成多说插件非常简单，这也是我喜欢这个主题的原因，简单、高效。其他主题的配置需要你们自己研究了，不过都差不多的。Next 主题更多第三方服务请参考：</em></p>
<blockquote>
<p><a href="http://theme-next.iissnan.com/third-party-services.html" title="第三方服务集成 - Next 使用文档" target="_blank" rel="noopener">第三方服务集成 - Next 使用文档</a></p>
</blockquote>
<h2 id="Next-主题"><a href="#Next-主题" class="headerlink" title="Next 主题"></a>Next 主题</h2><p>下面说一下 Next 主题如何集成多说。首先要在 <a href="http://duoshuo.com/" title="多说" target="_blank" rel="noopener">多说</a> 创建一个站点，具体步骤如下：</p>
<ol>
<li>登录后在首页选择 “我要安装”。</li>
<li>创建站点，填写表单。如图：<br><img src="duoshuo_create.png" alt="多说创建站点"></li>
<li>在博客站点配置文件 <code>_config.yml</code> 中添加如下代码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 多说评论功能</span><br><span class="line">duoshuo_shortname: xxx # 你填写在多说域名中的值</span><br><span class="line"></span><br><span class="line"># 多说分享服务，必须与多说评论同时使用</span><br><span class="line">duoshuo_share: true</span><br></pre></td></tr></table></figure></li>
<li>启用后默认在所有页面都会显示多说评论框，比如分类页面、标签页面、自定义的关于页面，如果不想在这些页面显示评论框，找到对应的<code>index.md</code>文档，在<code>Front-matter</code>(文件最上方以 <code>---</code> 分隔的区域)中加入 <code>comments: false</code> 这一行代码就行了</li>
</ol>
<h2 id="Landscape-主题"><a href="#Landscape-主题" class="headerlink" title="Landscape 主题"></a>Landscape 主题</h2><p>顺便说一下 Hexo 默认的 Landscape 主题如何集成多说，具体步骤如下：</p>
<ol>
<li>与上面相同</li>
<li>修改 <code>themes\landscape\layout\_partial\article.ejs</code> 模板，把：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">index</span> &amp;&amp; <span class="attr">post.comments</span> &amp;&amp; <span class="attr">config.disqus_shortname</span>)&#123; %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"comments"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"disqus_thread"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">noscript</span>&gt;</span>Please enable JavaScript to view the <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"//disqus.com/?ref_noscript"</span>&gt;</span>comments powered by Disqus.<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>
<p>改为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">index</span> &amp;&amp; <span class="attr">post.comments</span> &amp;&amp; <span class="attr">config.duoshuo_shortname</span>)&#123; %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"comments"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多说评论框 start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ds-thread"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">data-thread-key</span>=<span class="string">"&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">data-title</span>=<span class="string">"&lt;%= post.title %&gt;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">data-url</span>=<span class="string">"&lt;%= page.permalink %&gt;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多说评论框 end --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="xml">        var duoshuoQuery = &#123;short_name:'<span class="tag">&lt;<span class="name">%=</span> <span class="attr">config.duoshuo_shortname</span> %&gt;</span>'&#125;;</span></span><br><span class="line">        (function() &#123;</span><br><span class="line">            var ds = document.createElement('script');</span><br><span class="line">            ds.type = 'text/javascript';ds.async = true;</span><br><span class="line">            ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';</span><br><span class="line">            ds.charset = 'UTF-8';</span><br><span class="line">            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds);</span><br><span class="line">        &#125;)();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多说公共JS代码 end --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="美化多说"><a href="#美化多说" class="headerlink" title="美化多说"></a>美化多说</h1><h2 id="多说设置"><a href="#多说设置" class="headerlink" title="多说设置"></a>多说设置</h2><p>登陆 <a href="http://duoshuo.com/" title="多说" target="_blank" rel="noopener">多说</a>，点击后台管理，在<code>设置</code>中修改，包括基本设置、自定义文本、默认头像、外观主题。如图：</p>
<p><img src="duoshuo_text.png" alt="多说自定义文本"></p>
<h2 id="自定义多说分享图标"><a href="#自定义多说分享图标" class="headerlink" title="自定义多说分享图标"></a>自定义多说分享图标</h2><p>多说提供很多平台的分享服务，有时候我们肯能并不需要这么多，要如何修改呢？<br>首先，进入到 <code>themes\next\layout\_partials\share\duoshuo_share.swig</code> ，在这里就可以修改图标，至于都有什么图标，请参考：</p>
<blockquote>
<p><a href="http://dev.duoshuo.com/docs/5497972ba1165bfd53cf4263" title="多说分享组件自定义图标 - 多说开发者中心" target="_blank" rel="noopener">多说分享组件自定义图标 - 多说开发者中心</a></p>
</blockquote>
<h2 id="多说评论显示-UA"><a href="#多说评论显示-UA" class="headerlink" title="多说评论显示 UA"></a>多说评论显示 UA</h2><p>在每一条多说评论后显示评论者所使用的代理信息（如 操作系统、浏览器），效果如下：</p>
<p><img src="duoshuo_ua.png" alt="多说评论显示 UA 示例"></p>
<p>启用此功能，需要编辑<code>主题配置文件</code> <code>_congig.yml</code> 如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Make duoshuo show UA</span><br><span class="line"># user_id must NOT be null when admin_enable is true!</span><br><span class="line"># you can visit http://dev.duoshuo.com get duoshuo user id.</span><br><span class="line">duoshuo_info:</span><br><span class="line">  ua_enable: true</span><br><span class="line">  admin_enable: true</span><br><span class="line">  user_id: xxxxxx</span><br><span class="line">  admin_nickname: 权限汪</span><br></pre></td></tr></table></figure>
<p>只要设置 <code>ua_enable</code> 为 true 即可显示 UA 信息。 <code>admin_enable</code> 是用于显示 <code>博主</code> 文字，表明评论者是博主【默认显示的是博主，我给改成权限汪了】，此字段需要同时配置 user_id。 请访问 <a href="http://dev.duoshuo.com/" title="多说开发者中心" target="_blank" rel="noopener">多说开发者中心</a>，登录并访问 <code>我的主页</code> 获取 user_id ， 此 ID 是网址最后那串数字。</p>
<h2 id="自定义-CSS"><a href="#自定义-CSS" class="headerlink" title="自定义 CSS"></a>自定义 CSS</h2><p>登陆 <a href="http://duoshuo.com/" title="多说" target="_blank" rel="noopener">多说</a>，点击后台管理，在 <code>设置/基本设置/自定义CSS</code> 中可以修改多说的 CSS 样式，如图：</p>
<p><img src="duoshuo_css.png" alt="多说 - 自定义 CSS"></p>
<p>我的修改如下（可以使用键盘上的上下左右查看看不到的代码）：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 设置圆形头像 */</span></span><br><span class="line"><span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-avatar</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">54px</span>; <span class="attribute">height</span>:<span class="number">54px</span>;   <span class="comment">/*设置图像的长和宽*/</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">27px</span>;        <span class="comment">/*设置图像圆角效果,在这里我直接设置了超过 width/2 的像素，即为圆形了*/</span></span><br><span class="line">    <span class="attribute">-webkit-border-radius</span>: <span class="number">27px</span>;<span class="comment">/*圆角效果：兼容webkit浏览器*/</span></span><br><span class="line">    <span class="attribute">-moz-border-radius</span>: <span class="number">27px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 所有样式 */</span></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">-webkit-border-radius</span>: <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">0px</span> <span class="number">#fff</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 喜欢按钮 */</span></span><br><span class="line"><span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> <span class="selector-tag">a</span><span class="selector-class">.ds-like-thread-button</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#f3726d</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0px</span> <span class="number">0</span> <span class="number">#fff</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 点击喜欢后弹出的分享图标 */</span></span><br><span class="line"><span class="selector-class">.ds-service-link</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"//static.duoshuo.com/images/service-icons-color-flat.png?v=2"</span>) no-repeat;</span><br><span class="line">    <span class="attribute">_background-image</span>: <span class="built_in">url</span>(<span class="string">"//static.duoshuo.com/images/service-icons-color-flat.gif?v=2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 上面那个分享图标我是想改成扁平化的，但是修改了后 */</span></span><br><span class="line"><span class="comment">/* 下面这几个图标的坐标位置属性（多说原生的代码）就无效了，不知道为什么，于是自己手动写上去了 */</span></span><br><span class="line"><span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-qzone</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">128px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-qqt</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">64px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-renren</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">32px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-kaixin</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">80px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-douban</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">96px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-baidu</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">208px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 被顶起来的评论 */</span></span><br><span class="line"><span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-gradient-bg</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#E9E9E9</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 评论框默认显示文字样式 */</span></span><br><span class="line"><span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-textarea-wrapper</span> <span class="selector-tag">textarea</span>, <span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-textarea-wrapper</span> <span class="selector-class">.ds-hidden-text</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, Verdana, sans-serif <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 发布评论按钮 */</span></span><br><span class="line"><span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-post-button</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, Verdana, sans-serif <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span> none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#FFFFFF</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background</span>: none repeat scroll <span class="number">0</span> <span class="number">0</span> <span class="number">#F3726D</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">text-transform</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease <span class="number">0s</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">-moz-transition</span>: all <span class="number">0.3s</span> ease <span class="number">0s</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>: all <span class="number">0.3s</span> ease <span class="number">0s</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0px</span> <span class="number">0</span> <span class="number">#fff</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 发布评论按钮  hover */</span></span><br><span class="line"><span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-post-button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: none repeat scroll <span class="number">0</span> <span class="number">0</span> <span class="number">#303030</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">color</span>: white <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 评论框边框 */</span></span><br><span class="line"><span class="selector-class">.theme-next</span> <span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-textarea-wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#DEDEDE</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 评论框下面框的边框(好绕啊！) */</span></span><br><span class="line"><span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-post-toolbar</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#DEDEDE</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#E9E9E9</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 昵称 */</span></span><br><span class="line"><span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-highlight</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#F3726D</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 顶 */</span></span><br><span class="line"><span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-post-liked</span> <span class="selector-tag">a</span><span class="selector-class">.ds-post-likes</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#F3726D</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 发布旁边的“分享到”图标 */</span></span><br><span class="line"><span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-service-icon</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"//static.duoshuo.com/images/service-icons-color-flat.png"</span>) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">_background-image</span>: <span class="built_in">url</span>(<span class="string">"//static.duoshuo.com/images/service-icons-color-flat.gif"</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 隐藏多说底部的版权 */</span></span><br><span class="line"><span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-powered-by</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 最近访客的头像 */</span></span><br><span class="line"><span class="selector-id">#ds-recent-visitors</span> <span class="selector-class">.ds-avatar</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">27px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">-webkit-border-radius</span>: <span class="number">27px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">-moz-border-radius</span>: <span class="number">27px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 最近访客的头像 */</span></span><br><span class="line"><span class="selector-id">#ds-recent-visitors</span> <span class="selector-class">.ds-avatar</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我比较喜欢简洁扁平化的风格，所以做了上述的更改。小伙伴们具体看那些组件不顺眼，要修改掉，在网页上右键，选择 <code>检查元素</code> 就可以看到相对应的类名和 ID 等等。如果不会 CSS，建议你去 <a href="http://www.w3school.com.cn/css/index.asp" title="CSS 教程 - W3School" target="_blank" rel="noopener">CSS 教程 - W3School</a> 简单的学习一下 CSS 的基本知识。</p>
<p>另外我发现 Next 主题也对多说的 CSS 样式做了些更改，CSS路径 <code>themes\next\source\css\_common\components\third-party\duoshuo.styl</code>，所以如果小伙伴用了其他主题，显示样式可能有点区别。 目前就先改这么多，更多的样式还在开发中，会不定期的更新。如果小伙伴有什么更好的样式，欢迎留言~</p>
<h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><p><strong>2016-05-28 更新</strong></p>
<h2 id="添加站点最近访客功能"><a href="#添加站点最近访客功能" class="headerlink" title="添加站点最近访客功能"></a>添加站点最近访客功能</h2><p>你只需要在想要显示的地方添加如下代码即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ds-recent-visitors"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-num-items</span>=<span class="string">"36"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-avatar-size</span>=<span class="string">"42"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"ds-recent-visitors"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>data-num-items：显示的最近访客数量<br>data-avatar-size： 访客头像大小<br>CSS 设置：请参考上面的自定义CSS</p>
<p>当然，前提是你使用了多说评论功能，因为最近访客功能就是由多说提供的。我是直接写在了 <code>about/index.md</code> 文件中。<a href="http://www.cylong.com/about/" title="关于我 - 笑话人生">点此</a> 看看我的访客功能(●’◡’●)</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<p><a href="http://dev.duoshuo.com/docs/" title="多说使用帮助 - 多说开发者中心" target="_blank" rel="noopener">多说使用帮助 - 多说开发者中心</a><br><a href="http://dev.duoshuo.com/discussion" title="讨论区 - 多说开发者中心" target="_blank" rel="noopener">讨论区 - 多说开发者中心</a><br><a href="http://theme-next.iissnan.com/theme-settings.html" title="主题配置 - Next 使用文档" target="_blank" rel="noopener">主题配置 - Next 使用文档</a><br><a href="http://theme-next.iissnan.com/third-party-services.html" title="第三方服务集成 - Next 使用文档" target="_blank" rel="noopener">第三方服务集成 - Next 使用文档</a></p>
</blockquote>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2016/04/25/hexo-next-duoshuo/" title="Hexo 集成多说评论 + 多说分享 + 美化多说">Hexo 集成多说评论 + 多说分享 + 美化多说</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2016/04/25/hexo-next-duoshuo/" title="Hexo 集成多说评论 + 多说分享 + 美化多说">http://www.cylong.com/blog/2016/04/25/hexo-next-duoshuo/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 10 Metro 应用闪退、无法打开修复方法</title>
    <url>/blog/2016/05/15/windows-10-metro-error/</url>
    <content><![CDATA[<hr>
<p>最近在使用 WindowsModernAppsTools 研究 <a href="http://www.cylong.com/blog/2016/06/07/windows-10-metro-shadowsocks/" title="Windows 10 Metro 应用使用本地 Shadowsocks 代理">Windows Metro 应用翻墙</a> 问题，由于我的手贱删除了些不该删除的东西，导致我的系统中很多 Win 10 应用没法打开了，比如日历、资讯、天气、必应词典等等都打不开了。虽然平时不常用，但是强迫症的我表示没法忍受啊！于是找了很多资料，终于搞定了！</p>
<a id="more"></a>
<p><strong>注意：</strong> 我说的应用都是 Windows 应用商店里的应用。</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ol>
<li>键盘组合键 <span class="fa fa-windows"></span> + S，呼出 Cortana，然后输入 PowerShell。在结果中的 PowerShell 上 <code>右键-&gt;以管理员身份运行</code>。</li>
<li>输入以下命令：<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Get-AppXPackage -AllUsers | Foreach &#123;Add-AppxPackage -DisableDevelopmentMode -Register <span class="string">"<span class="variable">$($_.InstallLocation)</span>\AppXManifest.xml"</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li>回车后等待命令执行完毕即可。</li>
<li>以上其实是对应用进行了重置</li>
</ol>
<h1 id="参考资料-amp-感谢"><a href="#参考资料-amp-感谢" class="headerlink" title="参考资料&amp;感谢"></a>参考资料&amp;感谢</h1><blockquote>
<p><a href="http://www.ithome.com/html/win10/166832.htm" title="Win10应用商店、应用打不开或闪退的解决方法 - IT之家" target="_blank" rel="noopener">Win10应用商店、应用打不开或闪退的解决方法 - IT之家</a></p>
</blockquote>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2016/05/15/windows-10-metro-error/" title="Windows 10 Metro 应用闪退、无法打开修复方法">Windows 10 Metro 应用闪退、无法打开修复方法</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2016/05/15/windows-10-metro-error/" title="Windows 10 Metro 应用闪退、无法打开修复方法">http://www.cylong.com/blog/2016/05/15/windows-10-metro-error/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>.gitignore 的使用</title>
    <url>/blog/2016/05/19/gitignore/</url>
    <content><![CDATA[<hr>
<p>当我们在项目开发的时候，常常使用 Git 做版本控制工具。有时候，我们不希望某些文件或者文件夹被 Git 追踪，比如项目产生的中间文件【.class 、 .o】 ，比如某些编辑器的副本文件【一般文件名带有 ~ 符号】，还有一些 log 文件等等。使用命令行的小伙伴可以不使用 <code>git add</code> 把他们加到索引中，不过随即而来的就是一些麻烦事，在你使用 <code>git add .</code> 的时候还是会追踪这些文件。使用 <code>git status</code> 也会显示 <code>Untracked files……</code>。我一直在使用 Github For Windows ，如果没有 .gitignore 文件，每次提交之前也要取消勾选那些不想上传的文件，非常的麻烦。</p>
<a id="more"></a>
<h1 id="创建-gitignore"><a href="#创建-gitignore" class="headerlink" title="创建 .gitignore"></a>创建 .gitignore</h1><p>以上说的那些问题都可以通过一个或者更多的 .gitignore 文件搞定，你可以在项目的任意目录下创建 .gitignore 文件，此文件的影响范围是当前目录和其所有子目录，可以在不同目录创建多个 .gitignore 文件【不过一般都是在项目根目录创建一个就行了】。</p>
<p>需要注意的是 Windows 下直接<code>右键-&gt;新建文本文档</code>，然后键入文件名是没法创建的。。。详情请参考我的另一篇博客【这两篇博客应该是同一天写完的啊！拖延症得治呀( ╯□╰ )】：</p>
<blockquote>
<p><a href="http://www.cylong.com/blog/2016/05/09/windows-linux-new-file/" title="Windows 使用 cmd(命令提示符)创建文件">Windows 使用 cmd(命令提示符)创建文件</a></p>
</blockquote>
<p>你还可以在 Github 上新建一个仓库的同时指定生成特定的 .gitignore 文件，如下图：</p>
<p><img src="create-gitignore.png" alt="Github 自动创建指定的 .gitignore"></p>
<h1 id="编辑-gitignore"><a href="#编辑-gitignore" class="headerlink" title="编辑 .gitignore"></a>编辑 .gitignore</h1><p>创建好后，我们就可以用任何编辑器打开了，在其中填写你想要忽略的文件的文件名，Git 就会忽略这些文件。例子请往下看：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以'#' 开始的行，被视为注释。</span></span><br><span class="line"><span class="comment"># 忽略掉所有文件名是 cylong 的文件和文件夹。</span></span><br><span class="line">cylong</span><br><span class="line"><span class="comment"># 如果只想忽略 cylong 文件夹【不能有上面那段代码】。</span></span><br><span class="line">cylong/</span><br><span class="line"><span class="comment"># 如果只想忽略 doc/ 下面的 cylong 文件【同样不能有上面的 cylong 和 cylong/ 】</span></span><br><span class="line">doc/cylong</span><br><span class="line"><span class="comment"># 忽略所有后缀为 html 文件。</span></span><br><span class="line">*.html</span><br><span class="line"><span class="comment"># about.html 不想被忽略。</span></span><br><span class="line">!about.html</span><br><span class="line"><span class="comment"># 忽略所有后缀为 .o 和 .a文件。</span></span><br><span class="line">*.[oa]</span><br></pre></td></tr></table></figure>
<p>除上面的一些例子以外，[abc]、[0-9]、[a-z]、? 这些正则表达式也是支持的。</p>
<h1 id="使用-Github-的配置文件"><a href="#使用-Github-的配置文件" class="headerlink" title="使用 Github 的配置文件"></a>使用 Github 的配置文件</h1><p>如果只是我们自己写的话，可能并不会写的很全【重要的是比较麻烦是吧！】。还好 Github 已经为我们准备了各种配置文件，我们想要用哪个，就直接拿来用就好了。详情请戳：</p>
<blockquote>
<p><a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a></p>
</blockquote>
<h1 id="删除已经跟踪的文件"><a href="#删除已经跟踪的文件" class="headerlink" title="删除已经跟踪的文件"></a>删除已经跟踪的文件</h1><p>如果文件已经被 Git 跟踪了， 那么这些文件即使被写在了 .gitignore 中，Git 也不会忽略他，还是会继续跟踪，解决办法是输入以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git rm --cached test.txt <span class="comment"># 如果是文件夹，后面再加上 -r</span></span><br><span class="line">git commit -m <span class="string">'delete test.txt'</span></span><br></pre></td></tr></table></figure>
<h1 id="参考资料-amp-感谢"><a href="#参考资料-amp-感谢" class="headerlink" title="参考资料&amp;感谢"></a>参考资料&amp;感谢</h1><blockquote>
<p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013758404317281e54b6f5375640abbb11e67be4cd49e0000" title="忽略特殊文件 - 廖雪峰的官方网站" target="_blank" rel="noopener">忽略特殊文件 - 廖雪峰的官方网站</a><br><a href="https://segmentfault.com/a/1190000000522997" title=".gitignore 文件使用说明 - change2hao" target="_blank" rel="noopener">.gitignore 文件使用说明 - change2hao</a></p>
</blockquote>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2016/05/19/gitignore/" title=".gitignore 的使用">.gitignore 的使用</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2016/05/19/gitignore/" title=".gitignore 的使用">http://www.cylong.com/blog/2016/05/19/gitignore/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>gitignore</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 使用 cmd(命令提示符)创建文件</title>
    <url>/blog/2016/05/09/windows-linux-new-file/</url>
    <content><![CDATA[<hr>
<p>最近在研究 <a href="http://www.cylong.com/blog/2016/05/19/gitignore/" title=".gitignore 的使用">.gitignore 的使用</a>，于是想创建一个 <code>.gitignore</code> 文件做测试，<code>右键-&gt;新建-&gt;文本文档</code> 再输入文件名后，惊讶的发现，Windows 竟然提示： 请键入文件名！【不得不去吐槽！】。看样子 Windows 是把 gitignore 当成文件名的后缀了。没办法，只好打开 cmd(命令提示符)去创建文件了。</p>
<a id="more"></a>
<h1 id="打开-cmd"><a href="#打开-cmd" class="headerlink" title="打开 cmd"></a>打开 cmd</h1><p>一般有以下方式打开 cmd【<em>我使用的是 Windows 10 系统，某些方法可能没用</em>】：</p>
<ul>
<li>在某个文件夹下按住 <code>Shift</code> 键，然后点击 <code>鼠标右键</code>，选择 <code>在此处打开命令窗口</code>（建议使用此方式，这样你就不用 cd 到指定的文件夹了）。</li>
<li>键盘组合键 <span class="fa fa-windows"></span> + R，然后输入 <code>cmd</code> 并确定。</li>
<li>键盘组合键 <span class="fa fa-windows"></span> + X，然后选择 <code>命令提示符</code>。</li>
<li>键盘组合键 <span class="fa fa-windows"></span> + S，呼出 Cortana，然后输入 cmd 并确认（Windows 10才支持）。</li>
</ul>
<h1 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo hello &gt; .abc</span><br></pre></td></tr></table></figure>
<p>解释：</p>
<ol>
<li>“echo hello” ：输出 “hello” 到控制台。</li>
<li>“> .abc” ：输出重定向到 .abc 文件中【没有此文件就会创建】。</li>
<li>当然你也可以使用其他的命令，比如 <code>type</code>，来输出重定向。核心思想就是把某些字符串输出重定向到指定文件里就可以了。</li>
</ol>
<h1 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir .abc</span><br></pre></td></tr></table></figure>
<h1 id="Linux-使用-shell-创建文件"><a href="#Linux-使用-shell-创建文件" class="headerlink" title="Linux 使用 shell 创建文件"></a>Linux 使用 shell 创建文件</h1><p>顺便说一下使用 shell 创建文件吧。上面的那些命令在 shell 中都可以使用，另外说一个在 shell 中更方便的命令。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">touch .abc</span><br></pre></td></tr></table></figure>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>写本文的目的是在 Windows 下创建类似 .abc 这样的文件没法使用 <code>右键-&gt;新建</code> 来创建文件。如果你想创建一个 abc.txt 就不要这么麻烦啦【也没人会这么做吧(●’◡’●)】</p>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2016/05/09/windows-linux-new-file/" title="Windows 使用 cmd(命令提示符)创建文件">Windows 使用 cmd(命令提示符)创建文件</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2016/05/09/windows-linux-new-file/" title="Windows 使用 cmd(命令提示符)创建文件">http://www.cylong.com/blog/2016/05/09/windows-linux-new-file/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>cmd</tag>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 Github Pages 禁止百度爬虫抓取的问题</title>
    <url>/blog/2016/05/22/github-baidu-spider-exception/</url>
    <content><![CDATA[<hr>
<p>最近在研究网站在 Google 和百度的收录问题，Google 收录很轻松，抓取提交下链接就好了，但是百度却花了我好长时间才搞定，这也是为什么这篇博客写的这么晚 ( ╯□╰ )。有关如何能让你的网站被搜索到请参考：</p>
<blockquote>
<p><a href="/blog/2016/05/22/google-baidu-search/" title="如何在 Google 和百度里搜索到自己的网站">如何在 Google 和百度里搜索到自己的网站</a></p>
</blockquote>
<a id="more"></a>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>在 <a href="http://zhanzhang.baidu.com/" title="百度站长平台" target="_blank" rel="noopener">百度站长平台</a> 上进行抓取诊断的时候，发现一直抓取失败，如图：</p>
<p><img src="spider-test.png" alt="百度爬虫抓取错误"><br><img src="exception.png" alt="百度爬虫抓取错误"></p>
<p>后来才发现，原来是 Github 禁止百度爬虫抓取，原因是百度的抓取太猛烈，给 Github 的用户造成了可用性问题，而且会一直禁用下去。。。 【我该吐槽 Github 呢？还是百度呢？大家心知肚明就好。（╯－＿－）╯╧╧】</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>我想了想，既然 Github 不让百度抓取，那么我干脆把博客部署到其他地方吧。于是找到了国内的 <a href="https://coding.net" title="CODING" target="_blank" rel="noopener">CODING</a> 【之前可能有很多小伙伴使用的是 <a href="https://gitcafe.com/" title="Gitcafe" target="_blank" rel="noopener">Gitcafe</a>，不过已经被 CODING 收购了，2016-05-31 号就会停止服务】。CODING 中也提供和 Github 相同的 Pages 服务。下面是具体步骤：</p>
<ol>
<li>注册登录 <a href="https://coding.net" title="CODING" target="_blank" rel="noopener">CODING</a>。</li>
<li>创建新项目，项目的后缀必须是和你的个性后缀一样。</li>
<li>创建项目的时候你可以选择从 Github 上导入你的博客仓库或者之后自己部署到 CODING 上，如下图：<br><img src="import-from-github.png" alt="从 Github 上导入仓库"></li>
<li>进入你的项目，点击左侧的 <code>代码</code>，再选择 <code>Pages 服务</code>，选择 <code>部署分支</code>，默认是 <code>coding-pages</code>，建议换成 <code>master</code> 分支和 Github 保持一致。然后点击 <code>立即开启</code>。</li>
<li>绑定自己的域名，如下图：<br><img src="coding-pages.png" alt="Coding Pages"></li>
<li>到你的 DNS 服务商修改你的域名解析记录，这里不需要删除解析到 Github 的记录，像我下面这样配置就可以，这样正常访问还是访问到 Github 上，百度抓取的时候是抓取的 CODING 上的项目。<br>万网 DNS 设置：<br><img src="dns-parse.png" alt="DNS 解析记录 - 万网"><br>DNSPod 设置：<br><img src="dns-parse-dnspod.png" alt="DNS 解析记录 - DNSPod"><br>注意：我的域名在万网购买的，默认使用的是万网的 DNS，设置成百度后开始是好用的，后来就又抓取不到了（╯－＿－）╯╧╧。 于是我就换成了 <a href="https://www.dnspod.cn/" title="DNSPod-免费智能DNS解析服务商" target="_blank" rel="noopener">DNSPod</a> 的服务，把线路类型设置成百度、搜索引擎或者国内都可以。如果设置成搜索引擎的话注意 Google 也会去 Coding.net 抓取页面。设置成国内的话，国内的其他用户访问也访问的是 Coding.net 中的页面，相比访问 Github Pages 会更快一点。</li>
</ol>
<h1 id="Hexo-同时部署到-Github-和-Coding"><a href="#Hexo-同时部署到-Github-和-Coding" class="headerlink" title="Hexo 同时部署到 Github 和 Coding"></a>Hexo 同时部署到 Github 和 Coding</h1><p>既然上面的 DNS 分流到了 Github 和 Coding 上，那么我们在部署的时候就要同时维护这两个仓库，好消息是 Hexo 框架支持同时部署到 Github 和 Coding 上，详细介绍请参考：</p>
<blockquote>
<p><a href="/blog/2016/04/25/hexo-faq/#配置-SSH-公钥免去部署的时候输入密码" title="配置 SSH 公钥免去部署的时候输入密码">配置 SSH 公钥免去部署的时候输入密码</a></p>
</blockquote>
<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><blockquote>
<p><a href="http://jerryzou.com/posts/feasibility-of-allowing-baiduSpider-for-Github-Pages/" title="解决 Github Pages 禁止百度爬虫的方法与可行性分析 - 咀嚼之味" target="_blank" rel="noopener">解决 Github Pages 禁止百度爬虫的方法与可行性分析 - 咀嚼之味</a><br><a href="http://www.ezlippi.com/blog/2016/02/baidu-spider-forbidden.html" title="解决百度爬虫无法抓取github pages - Lippi-浮生志" target="_blank" rel="noopener">解决百度爬虫无法抓取github pages - Lippi-浮生志</a></p>
</blockquote>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2016/05/22/github-baidu-spider-exception/" title="解决 Github Pages 禁止百度爬虫抓取的问题">解决 Github Pages 禁止百度爬虫抓取的问题</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2016/05/22/github-baidu-spider-exception/" title="解决 Github Pages 禁止百度爬虫抓取的问题">http://www.cylong.com/blog/2016/05/22/github-baidu-spider-exception/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>Search</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>git</tag>
        <tag>seo</tag>
        <tag>爬虫</tag>
        <tag>search</tag>
      </tags>
  </entry>
  <entry>
    <title>站在 Shadowsocks 的肩膀上发现精彩的世界</title>
    <url>/blog/2016/05/26/shadowsocks/</url>
    <content><![CDATA[<hr>
<p>国内的网络环境我不说相信大家都懂。虽然墙内的世界很丰富，但是墙外的世界还有着更加精彩的内容。这不得不让我想起了曾经看过的一部漫画——进击的巨人。大部分人都在墙内过着安逸的生活，但是总有那么一帮人，想要去墙外探索未知的世界。我就是这样的人！【然后收到了女票的好人卡一张😃】之前因为想要体验 Google 搜索、体验 Youtube、查阅学习资料，还有玩的部分游戏需要翻墙，找了很多免费的代理和 VPN，效果都不好，断断续续的。后来经过舍友的推荐，入了 Shadowsocks 的坑。体验了有两个月左右，效果很棒，访问速度也很快，强烈推荐给大家使用！！！(●’◡’●)</p>
<a id="more"></a>
<h1 id="购买服务"><a href="#购买服务" class="headerlink" title="购买服务"></a>购买服务</h1><ol>
<li>点击进入 <a href="https://secure.shadowsocks.ch/aff.php?aff=8883" title="Shadowsocks" target="_blank" rel="noopener">Shadowsocks</a>【此链接是我的推广链接，你点击后还是会直接进入首页，但是通过这个链接购买服务后我也会获得一些好处啦，嘿嘿(<em>^_^</em>)】，进入首页后选择 <code>订购服务</code>。</li>
<li>之后选择你想要购买的服务，点击现在订购。我选择的是 <code>Shadowsocks.com 普通版</code>。需要注意的是，虽然显示的价格是美元，但是在后面支付的时候会自动转化为人民币。<br><img src="Shadowsocks-basic.png" alt="Shadowsocks普通版"></li>
<li>界面上选择你的付款年限，然后点击继续。</li>
<li>在结账页面，你需要填写各种信息，需要认真填写，这也是在创建账号。</li>
<li>Shadowsocks 支持 Alipay 支付宝国际版。之后付款就可以了，现在大约是 104 块钱一年。我买的时候，订购服务时显示的还是人民币，99块钱一年。虽然贵了一点点，不过还是可以接受的。</li>
<li>之后进入 <a href="https://portal.shadowsocks.com/clientarea.php" title="客户中心 - Shadowsocks" target="_blank" rel="noopener">客户中心</a>，用第4步创建的账号登陆。</li>
<li>点击产品服务，可以看到你刚刚购买的服务，状态为有效。<br><img src="my-service.png" alt="我的服务"></li>
<li>点击刚刚购买的服务，会看到产品详情。下面有配置文件下载，选择 Windows 版下载。下载下来是 <code>gui-config.json</code>。</li>
</ol>
<h1 id="客户端安装使用"><a href="#客户端安装使用" class="headerlink" title="客户端安装使用"></a>客户端安装使用</h1><p>支持的客户端：OS X， Windows， Linux， iOS， Android， OpenWRT 路由器等。<br>详情请参考：<a href="https://shadowsocks.com/client.html" title="客户端 - Shadowsocks" target="_blank" rel="noopener">客户端 - Shadowsocks</a>，客户端都在 Github 上。</p>
<h2 id="Windows-客户端"><a href="#Windows-客户端" class="headerlink" title="Windows 客户端"></a>Windows 客户端</h2><ol>
<li>点击下载 <a href="https://github.com/shadowsocks/shadowsocks-windows/releases/download/3.0/Shadowsocks-3.0.zip" title="Shadowsocks-3.0.zip" target="_blank" rel="noopener">Shadowsocks-3.0.zip</a>【写这篇博客时候的最新版本】，或者去 <a href="https://github.com/shadowsocks/shadowsocks-windows/releases" title="Github - Shadowsocks Windows" target="_blank" rel="noopener">Github - Shadowsocks Windows</a> 上寻找其他版本。</li>
<li>解压后有一个 <code>Shadowsocks.exe</code> 文件。最好把这个文件放到一个目录下，比如新建一个 Shadowsocks 文件夹。</li>
<li>把刚刚下载的 <code>gui-config.json</code> 文件放到与 <code>Shadowsocks.exe</code> 相同的目录下。</li>
<li>双击 <code>Shadowsocks.exe</code>，会出现一个 GUI 界面，自动读取了 <code>gui-config.json</code> 文件中的内容。<br><img src="Windows-Shadowsocks-gui.png" alt="Windows Shadowsocks 图形界面"></li>
<li>在右下角托盘图标上会有一个好像纸飞机的 Shadowsocks 图标，<code>右键-&gt;启动系统代理</code>，就可以越过墙壁，浏览更多丰富多彩的内容啦~<br><img src="Shadowsocks-menu.png" alt="Shadowsocks 菜单"></li>
<li>另外建议设置成 <code>右键-&gt;开机启动</code>，这样不用每次开机手动启动了。还可以在 <code>右键-&gt;服务器</code> 中选择不同的服务器。</li>
</ol>
<h2 id="Android-客户端"><a href="#Android-客户端" class="headerlink" title="Android 客户端"></a>Android 客户端</h2><ol>
<li>点击下载 <a href="https://github.com/shadowsocks/shadowsocks-android/releases/download/v2.10.3/shadowsocks-nightly-2.10.3.apk" title="shadowsocks-nightly-2.10.3.apk" target="_blank" rel="noopener">Shadowsocks-nightly-2.10.3.apk</a>【写这篇博客时候的最新版本】，或者去 <a href="https://github.com/shadowsocks/shadowsocks-android/releases" title="Github - Shadowsocks Android" target="_blank" rel="noopener">Github - Shadowsocks Android</a> 上寻找其他版本。</li>
<li>把这个 apk 安装到手机上【可以传到手机里，打开这个 apk 就能安装了】，中文叫影梭。</li>
<li>安装完成后仍然需要配置，支持扫描二维码配置，但是需要下载一个客户端。我不喜欢下太多的客户端，所以就手动配置，具体的值可以用记事本打开 <code>gui-config.json</code> 查看。<br><img src="Shadowsocks-Android.png" alt="Shadowsocks Android"></li>
<li>翻墙后就可以去 Google Play 商店更新 Shadowsocks 了(●’◡’●)</li>
</ol>
<p><strong>2016-09-27 更新</strong></p>
<ol start="5">
<li>目前最新版的 Shadowsocks 已经支持直接扫码配置了，不需要下载额外的客户端。在 Shadowsocks 官网里<code>客户中心--有效产品与服务</code>里就可以找到各个节点的二维码。</li>
</ol>
<h2 id="Linux-客户端"><a href="#Linux-客户端" class="headerlink" title="Linux 客户端"></a>Linux 客户端</h2><p>经历了N天之后,终于在舍友的指导下配置完成了。不得不说，Linux 真是一个让人折腾的系统。不过后来发现，其实还蛮简单的（╯－＿－）╯╧╧</p>
<ol>
<li>首先你需要下载 <a href="http://www.google.cn/chrome/browser/desktop/index.html" title="Chrome 浏览器" target="_blank" rel="noopener">Chrome 浏览器</a> 【不需要翻墙】，已经有的小伙伴就不用重新下载了。</li>
<li>使用如下命令安装你下载下来的 Chrome 安装包：<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i xxx-chrome-xxx.deb</span><br></pre></td></tr></table></figure></li>
<li>通过 PPA 源安装 Shadowsocks-qt5，仅支持 Ubuntu 14.04 或更高版本。<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:hzwhuang/ss-qt5</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure></li>
<li>之后就可以在应用列表里搜索到 Shadowsocks-qt5 了<br><img src="search-shadowsocks.png" alt="搜索应用列表"></li>
<li>打开图形化界面，点击 <code>文件 -&gt; 从 gui-config.json 导入链接</code>，接着就会像下图一样。<br><img src="Shadowsocks-Qt5-GUI.png" alt="Shadowsocks-Qt5 图形界面"></li>
<li>上图的 jp01 和 us01 都是后来配置好的，导入 gui-config.json 后还是有些需要自己配置。双击某一条连接，像我如下这样配置【默认有的配置就不要改了】：<br><img src="config.png" alt="连接配置"></li>
<li>配置完成后点击 <code>OK</code>，再点击界面上面的 <code>连接</code>，测试下延迟，看看是否能连接上。可以多配置几个，方便切换~</li>
<li>接下来就是配置 Chrome，让 Chrome 可以使用代理。下载安装 <a href="http://switchysharp.com/install.html" title="SwitchySharp" target="_blank" rel="noopener">SwitchySharp</a> 【目前此应用已经更新为 SwitchyOmega，请参考 <a href="/blog/2017/04/09/chrome-SwitchyOmega/" title="Chrome 配置 SwitchyOmega">Chrome 配置 SwitchyOmega</a>】。</li>
<li>打开 Chrome， 点击右上角的 <span class="fa fa-globe" aria-hidden="true"></span> 图标，再点击 <code>选项</code>。<br><img src="Shadowsocks-icon.png" alt="Shadowsocks 图标"></li>
<li>点击 <code>新建情景模式</code>，做如下配置。<br><img src="SwitchySharp-config.png" alt="SwitchySharp 配置"></li>
<li>保存后再点击 <span class="fa fa-globe" aria-hidden="true"></span> 图标就会有你刚刚配置的情景模式，选择后就可以使用 Chrome 浏览器浏览墙外的世界啦~【另外 SwitchySharp 可以升级成 SwitchyOmega 了，有兴趣的小伙伴可以试一试！】</li>
<li>做了上述一系列操作后只有在 Chrome 中可以翻出墙外，至于全局代理我正在研究，过几天会出教程，有会的小伙伴也可以交 ♂ 流下~【此坑算是没时间填了(╯‵□′)╯︵┻━┻】</li>
</ol>
<h2 id="IOS-客户端"><a href="#IOS-客户端" class="headerlink" title="IOS 客户端"></a>IOS 客户端</h2><p>由于本渣没有任何的苹果设备。。。所以自己研究吧，相信聪明的你可以完成的！去 <a href="https://shadowsocks.com/client.html" title="客户端 - Shadowsocks" target="_blank" rel="noopener">客户端 - Shadowsocks</a> 可以找到相关的客户端。</p>
<p><strong>2016-09-27 更新</strong></p>
<p>最近也是人品爆表，抽奖抽到了个 IPad mini 2，自然就研究了下如何在 IOS 中试用 Shadowsocks 了。官方推荐的客户端是 <code>shadowrocket</code>。App Store 里卖6块钱。我找到的是 <code>Lifi客户端-Shadowsocks and ShadowsocksR VPN</code>，也是在 App Store 里下载，不过是免费的。两者的配置方式基本一样，都可以扫码配置。在 Shadowsocks 官网里<code>客户中心--我的产品与服务</code>里就可以找到各个节点的二维码。</p>
<ol>
<li><p>Lifi 配置，在应用里选择<code>设置--从二维码导入</code>就会打开扫码界面，之后配置一下代理名称，打开系统 VPN 就可以了，非常简单【我觉得有张图挺好看的，于是强行加了张图(<em>^_^</em>)】。：<br><img src="Shadowsocks-IOS.png" alt="Shadowsocks IOS"></p>
</li>
<li><p>Shadowrocket 配置，打开应用，点击左上角的扫码图标就可以打开扫码页面：<br><img src="Shadowrocket.png" alt="Shadowrocket"></p>
</li>
</ol>
<p>看评论说<code>Lifi客户端-Shadowsocks and ShadowsocksR VPN</code>是拿的 Potatso 源码？我也不知道是否真实，有了解的小伙伴欢迎联系我。不过在我一天的试用中发现这个客户端一直掉线，而且舍友 IOS 10 也没法使用，于是我俩都换成了 <code>shadowrocket</code>，IOS 10 可以用，不过也是一直掉线啊，而且有时候还闪退(╯‵□′)╯︵┻━┻！如果用 Shadowrocket 的小伙伴发现QQ聊天的时候没法接收和发送图片，可以在应用的 <code>Settings-Global Routing</code>中选择 Proxy 就好了。大家可以先试一下免费的 Lifi，如果不好用再换成收费的那个 Shadowrocket 吧。有更好的客户端也欢迎在下面讨论。</p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul>
<li>要是偶尔发现网络不稳定，切换线路试一下。</li>
<li>不要同时在多台设备上使用，也不要把配置文件分享给其他人，可能会遭到封号行为。不过手机和 PC 同时使用时没事的。</li>
<li>我遇到一个问题就是启动某些服务器无法下载 Google Play 里的应用，而且有些应用也提示无法在你所在的国家或者地区购买，这个时候就切换下线路，并且清除 Google Play 数据重启就行了。</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<p><a href="https://github.com/shadowsocks/shadowsocks-qt5/wiki" title="中文文档 - Shadowsocks-qt5" target="_blank" rel="noopener">中文文档 - Shadowsocks-qt5</a><br><a href="blog/2017/04/09/chrome-SwitchyOmega/" title="Chrome 配置 SwitchyOmega - 笑话人生">Chrome 配置 SwitchyOmega - 笑话人生</a> 【Shadowsocks 配合 SwitchyOmega 使用有奇效，建议尝试下(●’◡’●)】</p>
</blockquote>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2016/05/26/shadowsocks/" title="站在 Shadowsocks 的肩膀上发现精彩的世界">站在 Shadowsocks 的肩膀上发现精彩的世界</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2016/05/26/shadowsocks/" title="站在 Shadowsocks 的肩膀上发现精彩的世界">http://www.cylong.com/blog/2016/05/26/shadowsocks/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>Shadowsocks</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>windows</tag>
        <tag>linux</tag>
        <tag>shadowsocks</tag>
        <tag>android</tag>
        <tag>翻墙</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 10 Metro 应用使用本地 Shadowsocks 代理</title>
    <url>/blog/2016/06/07/windows-10-metro-shadowsocks/</url>
    <content><![CDATA[<hr>
<p>Windows 8/10 的应用是不允许访问 localhost(127.0.0.1)，所以你配置了 Shadowsocks 代理，Windows 10 应用也无法翻墙， 因为Shadowsocks 的代理地址正好是 localhost(127.0.0.1)。这个时候我们就需要祭出 Windows 10 自带的程序：CheckNetIsolation。通过这个程序，你可以设置排除哪个应用的限制，使其可以翻墙。</p>
<a id="more"></a>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ol>
<li><p>寻找应用的 SID：键盘组合键 <span class="fa fa-windows"></span> + R，然后输入 <code>regedit</code>，打开注册表管理器，找到以下注册表项：<br>HKEY_CURRENT_USER\Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppContainer\Mappings<br>在其中找到你想要使用代理的应用，DisplayName 就是应用名，左边的项就是 SID。比如我找的是 Twitter。如下图：<br><img src="regedit_sid.png" alt="注册表项示例"><br>【PS： 你可以鼠标放在 SID 上右键-&gt;重命名，然后就可以复制整个 SID 了】</p>
</li>
<li><p>键盘组合键 <span class="fa fa-windows"></span> + X，然后按 A【命令提示符（管理员）】，打开终端后输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">CheckNetIsolation loopbackexempt -a -p=SID <span class="comment"># 上一步你复制的 SID</span></span><br></pre></td></tr></table></figure>
<p>回车后就大功告成了。</p>
</li>
<li><p>打开 Twitter 试一下<br><img src="twitter.png" alt="Twitter 翻墙成功"></p>
</li>
</ol>
<h1 id="CheckNetIsolation-参数"><a href="#CheckNetIsolation-参数" class="headerlink" title="CheckNetIsolation 参数"></a>CheckNetIsolation 参数</h1><ul>
<li>CheckNetIsolation.exe loopbackexempt -a -p=SID 添加指定程序到列表</li>
<li>CheckNetIsolation.exe loopbackexempt -d -p=SID 从列表删除指定程序</li>
<li>CheckNetIsolation.exe loopbackexempt -s 列出环回免除的应用列表</li>
</ul>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul>
<li><p>有些小伙伴可能会使用 WindowsModernAppsTools 来使 Windows 10 应用翻墙，这个软件也是使用了 CheckNetIsolation，另外最好不要随便动 Windows 10 应用的数据，说不定不小心删除了什么就导致应用崩溃了，切记切记。前车之鉴请参考：</p>
<blockquote>
<p><a href="http://www.cylong.com/blog/2016/05/15/windows-10-metro-error/" title="Windows 10 Metro 应用闪退、无法打开修复方法">Windows 10 Metro 应用闪退、无法打开修复方法</a></p>
</blockquote>
</li>
<li><p>Facebook 的 Windows 10 应用没法翻墙。我找了很多资料，大家的讨论也是只有 Facebook 没法翻墙，其他的都可以。有知道原因并能解决的小伙伴欢迎 <a href="http://www.cylong.com/about/#联系我" title="骚扰我">骚扰我</a> 或者在下面留言 (●’◡’●)</p>
</li>
<li>即使都是 Twitter 应用，但是不同的电脑 SID 可能不同。</li>
</ul>
<h1 id="参考-amp-感谢"><a href="#参考-amp-感谢" class="headerlink" title="参考&amp;感谢"></a>参考&amp;感谢</h1><blockquote>
<p><a href="https://plus.google.com/u/0/107096807950211631844/posts/CdTT2becCRm" title="Microsoft Edge 浏览器用上 shadowsocks 代理翻墙方法" target="_blank" rel="noopener">Microsoft Edge 浏览器用上 shadowsocks 代理翻墙方法</a></p>
</blockquote>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2016/06/07/windows-10-metro-shadowsocks/" title="Windows 10 Metro 应用使用本地 Shadowsocks 代理">Windows 10 Metro 应用使用本地 Shadowsocks 代理</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2016/06/07/windows-10-metro-shadowsocks/" title="Windows 10 Metro 应用使用本地 Shadowsocks 代理">http://www.cylong.com/blog/2016/06/07/windows-10-metro-shadowsocks/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>shadowsocks</tag>
        <tag>翻墙</tag>
      </tags>
  </entry>
  <entry>
    <title>稳耐风波愿始从</title>
    <url>/blog/2016/06/09/iverson/</url>
    <content><![CDATA[<hr>
<p>夕阳西下。<br>我看着AI坐在斯台普斯客队替补席上，呆呆望着场内发生的一切。他看着科比在他面前超越了他领先十三年的得分，听着为24号的喝彩，再看着记分牌上一点点被拉大的分数，他只是呆坐，眼神迷茫，无动于衷，仿佛自己来自另一个世界。惨败，又是惨败，第三次惨败。哨声响起，他低着头，快步走出球员通道。我看得到他的背影看不到他的落寞。<br>怎么能低头离开斯台普斯？就在一年前他还是昂首走出去。八年前他只手遮天，梦想就断裂在这金黄的球馆，唯一一次六月的征战，旧队友，老照片，八年的风霜，未改的容颜，怎敢遗忘那些瞬间？最震耳欲聋的欢呼，让洛杉矶的轻歌曼舞画上一道休止符，晃倒泰龙卢，最骄傲的迈步，是谁再说，他踏上的是一条荆棘密布，无人可能成功的路？<br>只是，八年了，我们早已认不出那块泰龙卢摔倒的地板。<br>物是人非。<br>隔了个半个地球，有人在心痛。</p>
<a id="more"></a>
<p>隔了半个美国，也会有人难过吗？<br>流年，剪影，十年。<br>费城，1996，状元，三号，金链子，狐朋狗友，唱片，嘘声，对神的挑战，拉里布朗，训练，爱恨交错，忠诚，2001，洛杉矶，MVP，得分王……<br>时间，路途，前进的光，没有回望。<br>以为会与费城到地老天荒，只是寥寥的胜场，深深的惆怅，时光在云顶嘹亮地唱，分别的波澜轻轻地荡，刻不下的时光，注定一人去流浪。<br>再见了，我爱的费城；<br>再见了，我们爱的AI。<br>断肠人去天涯。<br>天涯远吗？不远，他在天涯，天涯怎么会远！</p>
<p>谁道飘零不可怜，断肠人去自经年。<br>那个精灵飞翔的故事还在上演，只是不再属于瓦乔维亚球馆。只是那个夜晚，是个例外——<br>那个夜晚很美，他们的欢呼他们的笑，他们的拥抱他们记得他的好。他的亲吻他的奔跑，他微微润湿的双眼，告诉我们他同样忘不掉。<br>WELCOME BACK, AI，THANKS FOR TEN GREAT YEARS OF HEART&amp;SOUL.<br>轻轻把手放在耳边，绕场慢慢的跑，聆听。<br>还记得吗？费城的欢呼是世界上最美妙的音乐。<br>俯身，深深的亲吻。<br>WE MISS YOU,AI.<br>费城的天空，我们想你时，它落泪了。<br>风雨中，陪你走，不要相忘于江湖。<br>可，踏上回丹佛的飞机，便是陌路。<br>天咫尺，人南北。</p>
<p>叹人生，几番离合，便成迟暮。<br>三年了，沧海桑田，人事变迁，谁会相信什么永远。<br>当他终于回到家，发现一切都变了样，是熟悉的让人陌生？还是恍如隔世陌生的让人难过？<br>曾经的一代枭雄，走到穷途末路，不甘就此推出，于是来场豪赌，一次搭上全部，输了就退出江湖。<br>感谢我爱的费城——他的退役宣言里这样说。<br>终于等到了费城的橄榄枝。<br>我们爱的AI，请回家。<br>有一种答案叫落叶归根。<br>俯身，深深的亲吻，第二次。<br>弧线不同了是吗，可那份情意此生不变。<br>谁谓我生，我思议如风，历历人生。</p>
<p>莫回首斜阳下，诉不尽离人话。<br>当费城故事确定未完待续时，我高兴的快要疯掉，你没有去湖人，谁在乎什么总冠军？我只要你幸福。<br>有些泪水是坚硬的，它从英雄的脸上滑过，但与懦弱无关。<br>AI说，那是看到家门后的鼻酸反应。<br>多好！爱费城的AI又回到了爱AI的费城。<br>从此无关胜负，誓死守护。<br>陪君醉笑三万场，不用诉离殇。</p>
<p>落魄江湖还载酒，一种悲凉滋味。<br>当两个费城之子相遇在费城——他出生成长的地方，他扬名立万的地方。他们早已不如十三年前那般锋芒毕露。久经沙场，看惯人世冷暖，他们，已不再年轻。<br>只是他正如日中天，他似乎已日薄西山。<br>有悬念吗？有奇迹吗？有人相信吗？<br>似乎费城倒戈喊几声MVP也是正常的。<br>只是他摇头，说不。<br>那美妙的第三节，十五分，已无需我赘述。<br>兄弟友爱之城的尊严，从来都要他来维护。<br>没有悬念，没有奇迹，剧本已写好，不会改变，我们输了，只是，我们开始相信：<br>弯弓射日，看我卷土重来。</p>
<p>谁谓我悲，意如花信，瞳清若水。<br>我从未想过有一天还会看到阿伦艾弗森穿上那件印有SIXER的球衣——那件神圣的为曾有旁人触动过的球衣，自始至终只属于一个人的球衣。<br>我看着你在费城，看着你与费城荣辱与共，休戚相关，还你那份倔强，许你那份坚强。享受你的每一场胜利与失败——我也不清楚这样的日子还会有多久，如果费城真的是你的最后一站，我们陪你走完，直到你离开你最爱的篮球场，直到那件三号球衣在瓦乔维亚上空飘扬。</p>
<p>任往事随风，他们自随波逐流，自始至终，稳耐风波愿始从。</p>
<hr>
<p>这篇文章是我女票大概在2009年【那个时候她真是青涩又可爱(/▽＼=)】写在百度空间里的，但是百度空间在15年就关闭了。然后我就要来发到自己的博客里，作为一种回忆 o(^▽^)o【<del>还是自己的网站靠谱~</del>】</p>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2016/06/09/iverson/" title="稳耐风波愿始从">稳耐风波愿始从</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2016/06/09/iverson/" title="稳耐风波愿始从">http://www.cylong.com/blog/2016/06/09/iverson/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>艾已成诗</category>
      </categories>
      <tags>
        <tag>艾弗森</tag>
        <tag>艾已成诗</tag>
        <tag>篮球</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 Google 和百度里搜索到自己的网站</title>
    <url>/blog/2016/05/22/google-baidu-search/</url>
    <content><![CDATA[<hr>
<p>搭建完自己的博客或者有一个自己的网站什么的，总想着能在 Google 或者是百度里搜索到吧，这样就可以提高你的网站的知名度，说不定还会结 ♂ 交到志同道合的小伙伴呢 (●’◡’●)。下面就讲解下如何让自己的网站被搜索引擎收录~</p>
<a id="more"></a>
<h1 id="Google-搜索"><a href="#Google-搜索" class="headerlink" title="Google 搜索"></a>Google 搜索</h1><ol>
<li>点击 <a href="https://www.google.com/webmasters/" title="Google 网站站长" target="_blank" rel="noopener">Google 网站站长</a>，然后点击首页的 <code>SEARCH CONSOLE</code>。</li>
<li>添加你的网站，进行人机验证【就是证明这个网站是你的】。</li>
<li>进入到 <code>抓取-&gt;Google 抓取方式</code>。</li>
<li>点击 <code>抓取</code> 或者 <code>抓取并呈现</code>。</li>
<li>若提示完成或者部分完成，则可以将网址 <code>提交至索引</code>，有两种提交方式：仅抓取此网址、抓取此网址及其直接链接。都有次数限制。</li>
<li>等待一会，打开 Google，在搜索栏输入 <code>site:www.cylong.com</code>【换成你的域名】，就可以看到你网站的内容了~</li>
</ol>
<p><img src="google-search.png" alt="Google 抓取示例"></p>
<h1 id="百度搜索"><a href="#百度搜索" class="headerlink" title="百度搜索"></a>百度搜索</h1><ol>
<li>点击 <a href="http://zhanzhang.baidu.com/" title="百度站长平台" target="_blank" rel="noopener">百度站长平台</a>，登陆。</li>
<li>添加你的网站，进行人机验证。</li>
<li>点击 <code>抓取诊断</code> 判断百度是否能够抓取到你的网站【我的博客部署在 Github 上，结果 Github 禁止百度抓取 ( ╯□╰ )，如何解决请参考：<a href="/blog/2016/05/22/github-baidu-spider-exception/" title="解决 Github Pages 禁止百度爬虫抓取的问题">解决 Github Pages 禁止百度爬虫抓取的问题</a>】</li>
<li>点击 <code>链接提交</code> ，这里有很多种提交方式，各有各的优点，也有详细的说明。自己选择吧【实在不会就直接手动提交】</li>
<li>我使用的是自动提交方式，Hexo 的 Next 主题已经部署了自动推送的代码，我们只需在主题配置文件中找到 <code>baidu_push</code> 字段 , 设置其为 <code>true</code> 即可。</li>
<li>等待一会，打开百度，在搜索栏输入 <code>site:www.cylong.com</code>【换成你的域名】，就可以看到你网站的内容了~</li>
</ol>
<h1 id="其他的搜索引擎"><a href="#其他的搜索引擎" class="headerlink" title="其他的搜索引擎"></a>其他的搜索引擎</h1><p>其他的搜索引擎我用的也比较少，不过如果你的网站不知道什么时候也会被其收录的，我试了一下，我的博客的首页就被 Bing 收录了，当然你想像上面的那些方法在各个搜索引擎中管理你的网站也是可以的，然而我并没有闲心管那些【我猜测基本都是差不多的】，有兴趣的小伙伴可以自己试一试。</p>
<h1 id="搜索引擎优化-SEO"><a href="#搜索引擎优化-SEO" class="headerlink" title="搜索引擎优化(SEO)"></a>搜索引擎优化(SEO)</h1><blockquote><p>搜索引擎优化（英语：search engine optimization，缩写为SEO），是一种通过了解搜索引擎的运作规则来调整网站，以及提高目的网站在有关搜索引擎内排名的方式。由于不少研究发现，搜索引擎的用户往往只会留意搜索结果最前面的几个条目，所以不少网站都希望通过各种形式来影响搜索引擎的排序，让自己的网站可以有优秀的搜索排名。当中尤以各种依靠广告维生的网站为甚。</p>
<footer><strong>维基百科</strong><cite><a href="https://zh.wikipedia.org/wiki/%E6%90%9C%E5%B0%8B%E5%BC%95%E6%93%8E%E6%9C%80%E4%BD%B3%E5%8C%96" target="_blank" rel="noopener">搜索引擎优化</a></cite></footer></blockquote>
<p><strong>注意：</strong> <em>此文章是以 Hexo 搭建的博客为基础，某些插件只支持 Hexo 搭建的博客，如果是其他博客，请寻找支持自己博客的插件或者自己实现。</em></p>
<h2 id="添加-robots-txt"><a href="#添加-robots-txt" class="headerlink" title="添加 robots.txt"></a>添加 robots.txt</h2><p>robots.txt 可以告诉搜索引擎你网站的哪些页面可以被抓取，哪些页面不可以被抓取。将 robots.txt 放置在 source 根目录下。以下是我的 robots.txt：</p>
<figure class="highlight plain"><figcaption><span>robots.txt</span></figcaption><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line"></span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /lib/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line"></span><br><span class="line">Sitemap: http://www.cylong.com/sitemap.xml</span><br><span class="line">Sitemap: http://www.cylong.com/baidusitemap.xml</span><br></pre></td></tr></table></figure>
<h2 id="添加网站地图-Sitemap"><a href="#添加网站地图-Sitemap" class="headerlink" title="添加网站地图(Sitemap)"></a>添加网站地图(Sitemap)</h2><p>Sitemap 上面放置了网站上需要搜索引擎抓取的所有页面的链接，有助于搜索引擎抓取你的网站，清晰了解网站的架构，益于 SEO 优化。</p>
<ol>
<li><p>安装 Hexo 的 sitemap 插件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save       <span class="comment"># 适用于提交给 Google</span></span><br><span class="line">npm install hexo-generator-baidu-sitemap --save <span class="comment"># 适用于提交给百度</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在站点的 <code>_config.yml</code> 添加以下代码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">    path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">    path: baidusitemap.xml</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置成功后，在你执行 <code>hexo -g</code> 的时候，在 public 文件夹【也就是你的站点根目录】就会出现 sitemap.xml 和 baidusitemap.xml。然后在 robots.txt 中添加如下代码：</p>
<figure class="highlight plain"><figcaption><span>robots.txt</span></figcaption><table><tr><td class="code"><pre><span class="line">Sitemap: http://www.cylong.com/sitemap.xml</span><br><span class="line">Sitemap: http://www.cylong.com/baidusitemap.xml</span><br></pre></td></tr></table></figure>
</li>
<li><p>第三步中搜索引擎在抓取到 robots.txt 的时候会自动抓取站点地图。你还可以手动提交给 Google 和百度，都是带有提示的傻瓜式操作，相信大家都能解决吧(●’◡’●)</p>
</li>
</ol>
<ul>
<li>Google： <a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" title="Search Console" target="_blank" rel="noopener">Search Console</a></li>
<li>百度： <a href="http://zhanzhang.baidu.com/" title="百度站长平台" target="_blank" rel="noopener">百度站长平台</a></li>
</ul>
<p><strong>2017-04-13 更新</strong></p>
<p>在我向百度提交站点地图 baidusitemap.xml 的时候提示 XML 解析失败，猜测可能是格式有问题，通过查看 <a href="http://zhanzhang.baidu.com/college/courseinfo?id=267&amp;page=2#h2_article_title1" title="百度sitemap协议都支持哪些格式？" target="_blank" rel="noopener">百度sitemap协议都支持哪些格式？</a> 发现 Hexo 生成的 baidusitemap.xml 确实有问题，不过百度支持上文中生成的 sitemap.xml 格式的 XML 文档，上传这个就正常了。</p>
<p><img src="baidusitemap-error.png" alt="XML 解析失败"></p>
<h1 id="一些小点子"><a href="#一些小点子" class="headerlink" title="一些小点子"></a>一些小点子</h1><p>你在你的各大社交网站的个人信息里贴上你的博客域名【比如知乎、Facebook、Twitter、Github 等等】会提高你网站的访问量哟，还有在各大社交网站上回答有关问题可以附上自己的博客地址，也会增加访问量o(^▽^)o。当然，更重要的还是你的博客要内容丰富精彩，才会吸引更多的人。如果是自己的某个网站什么的，多注意下 SEO 优化也是不错的选择。</p>
<h1 id="参考-amp-感谢"><a href="#参考-amp-感谢" class="headerlink" title="参考&amp;感谢"></a>参考&amp;感谢</h1><blockquote>
<p><a href="http://www.yuan-ji.me/Hexo-%E4%BC%98%E5%8C%96%EF%BC%9A%E6%8F%90%E4%BA%A4sitemap%E5%8F%8A%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E7%88%AC%E8%99%AB%E6%8A%93%E5%8F%96-GitHub-Pages-%E9%97%AE%E9%A2%98/" title="Hexo 优化：提交 sitemap 及解决百度爬虫无法抓取 GitHub Pages 链接问题" target="_blank" rel="noopener">Hexo 优化：提交 sitemap 及解决百度爬虫无法抓取 GitHub Pages 链接问题</a></p>
</blockquote>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2016/05/22/google-baidu-search/" title="如何在 Google 和百度里搜索到自己的网站">如何在 Google 和百度里搜索到自己的网站</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2016/05/22/google-baidu-search/" title="如何在 Google 和百度里搜索到自己的网站">http://www.cylong.com/blog/2016/05/22/google-baidu-search/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>Search</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>seo</tag>
        <tag>search</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Eclipse 根据 WSDL 生成 Java 代码</title>
    <url>/blog/2016/07/01/wsdl-to-java/</url>
    <content><![CDATA[<hr>
<p>这学期的 SOA 课程已经结束了，但是我为什么感觉什么都没有学到呢！！反正学到什么就整理下好了！这次是使用 Eclipse 根据 WSDL 生成 Java 代码。整个过程都是自动的，完全是傻瓜式的！</p>
<a id="more"></a>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul>
<li>WSDL 地址【自己可以发布，如何发布我会在日后写，先挖个坑<del>一定要填上</del>】</li>
<li><a href="http://www.eclipse.org/downloads/eclipse-packages/" title="Eclipse IDE for Java EE Developers" target="_blank" rel="noopener">Eclipse IDE for Java EE Developers</a></li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li>打开 Eclipse，<code>File -&gt; New -&gt; Dynamic Web Project</code></li>
<li>右键刚刚新建的项目，<code>New -&gt; Other -&gt; Web Services -&gt; Web Service Client</code></li>
<li>在 Service definition 输入 WSDL 的地址，之后点 <code>Next</code> 或者 <code>Finish</code> 即可</li>
<li>会生成类似下面这样的代码结构<br><img src="wsdl-to-java.png" alt></li>
<li>其中 xxxProxy.java 中就有服务提供的接口方法，直接调用就行了。</li>
</ol>
<h1 id="参考-amp-感谢"><a href="#参考-amp-感谢" class="headerlink" title="参考&amp;感谢"></a>参考&amp;感谢</h1><blockquote>
<p><a href="http://andybang1981.blog.163.com/blog/static/177927368201426001589/" title="使用Eclipse生成Web Service Client - andybang1981的日志" target="_blank" rel="noopener">使用Eclipse生成Web Service Client - andybang1981的日志</a></p>
</blockquote>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2016/07/01/wsdl-to-java/" title="使用 Eclipse 根据 WSDL 生成 Java 代码">使用 Eclipse 根据 WSDL 生成 Java 代码</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2016/07/01/wsdl-to-java/" title="使用 Eclipse 根据 WSDL 生成 Java 代码">http://www.cylong.com/blog/2016/07/01/wsdl-to-java/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>wsdl</tag>
        <tag>web service client</tag>
        <tag>eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>集中式和分布式版本控制学习整理</title>
    <url>/blog/2016/09/26/git-svn/</url>
    <content><![CDATA[<hr>
<p>在面试的时候被问到平时喜欢用 Git 还是 SVN，他们之间的区别是什么？这自然就谈到了分布式和集中式的区别。作为一个学生党，免费的 Github 给我提供了很大的便利，我的所有项目都是放在 Github 上，毕竟 Github 还是一个全球最大的同性交友网站 ╮(╯▽╰)╭。下面就说说集中式和分布式版本控制的区别。</p>
<a id="more"></a>
<h1 id="为什么使用版本控制"><a href="#为什么使用版本控制" class="headerlink" title="为什么使用版本控制"></a>为什么使用版本控制</h1><p>在我们平时的开发过程中，大部分情况下是团队开发，即使是个人开发，我们也想对整个项目进行代码管理与备份等等。每次复制一份达成压缩包分类命名这样的肯定不是一个河里的解决办法，这只会让我们的磁盘空间越来越小，备份版本越来越多。在团队开发的时候，对代码进行合并管理的时候，总需要一些工具可以自动合并，版本控制系统应运而生。运用版本控制系统，我们可以对代码进行版本管理，可以随时查看之前版本的内容，随时回溯到之前版本中。团队合作的时候也可以自动合并代码，而不需要用一个共享文件，或者是进行定期的备份。</p>
<h1 id="集中式和分布式"><a href="#集中式和分布式" class="headerlink" title="集中式和分布式"></a>集中式和分布式</h1><p>版本控制系统也分为两类，集中式和分布式版本控制，我们所熟知的 Git 是分布式，SVN 是集中式，下面说说两者的区别。</p>
<h2 id="集中式"><a href="#集中式" class="headerlink" title="集中式"></a>集中式</h2><p>集中式版本控制系统有一个中央服务器，每个人在工作的时候都需要从中央服务器获取最新版本，修改后提交到中央服务器。其他人再获取最新代码进行更改。这种方式的缺点就是，我们必须有一个中央服务器，由于网络原因没法连接到服务器，或者服务器宕机，我们就没法进行数据获取和提交。而且由于是联网操作，网络环境也会影响到提交和下载速度。</p>
<p><img src="集中式.jpg" alt="集中式"></p>
<h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><p>那么分布式版本控制系统是如何解决这些问题的呢？首先，分布式版本控制系统没有所谓的中央服务器，每个站点【就是自己用来开发的电脑】都有一个完整的版本库，我们可以在本地进行修改提交。这样在没有网络的环境下也可以进行开发。当需要进行代码合并的时候，我们只要把自己的版本库推送给你的合作伙伴就可以了，这样他就可以看到你做的更改。同时，他也可以把他的版本库推送给你，这样你就可以看到他的修改了。由于每个人电脑里都是一个完整的版本库，所以自己不小心丢失数据的话，从其他地方里拷贝一份就可以了。不过平时开发中，我们不会用这样笨拙的方式来互相推送代码。毕竟每个人的电脑不是24小时开机，总不能打个电话给他说：我要推送代码给你啦！(╯‵□′)╯︵┻━┻因此，Github 就起到了一个“中央服务器”的作用。我们把代码提交到 Github 上，任何人都可以随时下载合并代码，给我们提供了很多便利。</p>
<p><img src="分布式.jpg" alt="分布式"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>看完以上的介绍，很多人可能会比较模糊，我们在开发的过程中不是总需要一个中央服务器嘛？感觉上平时使用 Git 或者 SVN 操作都是一样的啊！出现这种混淆是因为我们平时开发的时候总是有一个中央服务器，总是再联网状态下。首先说明，Git 不需要一个中央服务器，我们平时使用 Github 是为了让我们的团队开发更便利，如果你不嫌麻烦，完全可以不用中央服务器。而 SVN 是必须使用一个中央服务器，而且如果没法联网或者服务器宕机，所有人都没法工作。其次，Git 是可以在断网状态下提交，因为每个人的电脑里都是一个完整的代码仓库，包含提交历史等等。而 SVN 在断网的时候是没法提交的，也没法查看历史记录。当然，Git 优于 SVN 的不仅有上面的这些，还有很多强大的功能优于 SVN。比如强大的分支功能，Git 做一个小小的标记就会产生一个分支。而 SVN 是复制一份代码到分支目录。Git 还可以进行本地回滚【因为自己电脑里也是一个完整的版本库，但是提交到中央服务器上的时候可以减少冗余版本】</p>
<h1 id="参考-amp-感谢"><a href="#参考-amp-感谢" class="headerlink" title="参考&amp;感谢"></a>参考&amp;感谢</h1><p>以上这些知识都是参考下面这些连接里的内容，本意是我自己的学习笔记，特此对其进行感谢。</p>
<blockquote>
<p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374027586935cf69c53637d8458c9aec27dd546a6cd6000" title="集中式vs分布式 - 廖雪峰的官方网站" target="_blank" rel="noopener">集中式vs分布式 - 廖雪峰的官方网站</a><br><a href="https://www.zhihu.com/question/20093241" title="如何理解 Git 的分布式？ - 知乎" target="_blank" rel="noopener">如何理解 Git 的分布式？ - 知乎</a></p>
</blockquote>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2016/09/26/git-svn/" title="集中式和分布式版本控制学习整理">集中式和分布式版本控制学习整理</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2016/09/26/git-svn/" title="集中式和分布式版本控制学习整理">http://www.cylong.com/blog/2016/09/26/git-svn/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>svn</tag>
        <tag>分布式版本控制</tag>
        <tag>集中式版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>找出有序数组中 3 个和为 0 的数</title>
    <url>/blog/2016/11/08/three-number/</url>
    <content><![CDATA[<p>前几天偶尔看到一道题，感觉蛮有意思的，在自己思考，外加上网查询之后，找到了一个比较完美的算法解决。问题描述如下：</p>
<blockquote>
<p> 给定有序排列的N个整数，找出其中3个数相加和为0，输出所有的不重复的3个数，要求输出的结果依然有序。<br> 在单行内，输出的顺序和原来一致，每行之间的顺序和第一个数字在原数列中的顺序一致（如果相同则向后依次比较）<br> INPUT :<br> 5<br> -2 -1 0 1 2<br> OUTPUT:<br> -2 0 2<br> -1 0 1<br> INPUT :<br> 5<br> 2 2 0 -2 -4<br> OUTPUT:<br> 2 2 -4<br> 2 0 -2</p>
</blockquote>
<a id="more"></a>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol>
<li><p>首先思考：寻找有序数组（下文说的数组均是升序排列的）中两个和为 k 的值。很简单，两个指针 i 和 j 分别指向数组两端，计算两数的和，大于 k 则 <code>j--</code>，否则 <code>i++</code>，直到寻找到两个数和为 k 或者 <code>i &gt; j</code> 时停止。</p>
</li>
<li><p>上题中可以转换为寻找数组中两个和为 -k 的数，k 为数组中的元素，我们只需要再加一层循环，遍历数组中的值，作为 k 就可以了。</p>
</li>
<li><p>那么如何解决结果中有重复值的情况呢？比如我们输入 [-4, -2, 0, 2, 2] 这5个数，会输出两次 [-2, 0, 2]。其实这个也很好判断，当我们确定了三个数中的一个数，那么后面求出的两个数就确定下来了，比如我们确定”第一个数”是 -5，那么可能求出后面两个数是 [2, 3] 和 [1, 4]，当我们循环到下一个”第一个数”的时候，如果还是 -5，那求出的数据肯定还是重复的，所以直接跳过就好。【这块的描述好像不是很清楚啊！(╯‵□′)╯︵┻━┻ 不明白的话看下面的代码肯定一下子就明白了呢！】</p>
</li>
</ol>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">findThreeNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr, <span class="keyword">bool</span> asc)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> size = arr.size();</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;	<span class="comment">// 保存结果</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;	<span class="comment">// 保证"第一个数"在数组中</span></span><br><span class="line">		<span class="keyword">int</span> m = i + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> n = size - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (m &lt; n) &#123;</span><br><span class="line">			<span class="keyword">int</span> sum = arr[m] + arr[n];	<span class="comment">// 另外两个数的和</span></span><br><span class="line">			<span class="keyword">if</span> (sum + arr[i]  &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				asc ? n-- : m++;	<span class="comment">// 升序和降序的操作不一样</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (sum + arr[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">				asc ? m++ : n--;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;	<span class="comment">// 找到三数和为0</span></span><br><span class="line">				<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(<span class="number">3</span>);</span><br><span class="line">				v[<span class="number">0</span>] = arr[i];</span><br><span class="line">				v[<span class="number">1</span>] = arr[m];</span><br><span class="line">				v[<span class="number">2</span>] = arr[n];</span><br><span class="line">				result.push_back(v);</span><br><span class="line"></span><br><span class="line">				<span class="comment">// "第二个数"和"第三个数"分别判断其下个数是否重复</span></span><br><span class="line">				<span class="keyword">do</span> &#123;</span><br><span class="line">					m++;</span><br><span class="line">				&#125; <span class="keyword">while</span> (m &lt; n &amp;&amp; arr[m - <span class="number">1</span>] == arr[m]);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">do</span> &#123;</span><br><span class="line">					n--;</span><br><span class="line">				&#125; <span class="keyword">while</span> (m &lt; n &amp;&amp; arr[n + <span class="number">1</span>] == arr[n]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 外层循环"第一个数"，如果下一个"第一个数"相同，则为重复数据</span></span><br><span class="line">		<span class="keyword">while</span> (i &lt; size - <span class="number">2</span> &amp;&amp; arr[i + <span class="number">1</span>] == arr[i]) &#123;</span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> asc = <span class="literal">true</span>;	<span class="comment">// 升序</span></span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">		<span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; arr[i] &lt; arr[i - <span class="number">1</span>]) &#123;</span><br><span class="line">			asc = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result = findThreeNumber(arr, asc);</span><br><span class="line">	<span class="function"><span class="keyword">for</span> <span class="title">each</span> <span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v in result)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; v[<span class="number">0</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; v[<span class="number">1</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; v[<span class="number">2</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2016/11/08/three-number/" title="找出有序数组中 3 个和为 0 的数">找出有序数组中 3 个和为 0 的数</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2016/11/08/three-number/" title="找出有序数组中 3 个和为 0 的数">http://www.cylong.com/blog/2016/11/08/three-number/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>笑话人生，才刚刚开始</title>
    <url>/blog/2016/10/20/my-life-is-just-beginning/</url>
    <content><![CDATA[<hr>
<p>很多人的人生都有三个重大的转折点，第一是中考，第二是高考，第三是大学毕业。我很庆幸在这三个转折点，我都选择了或者有幸得到了自己心仪的结果，虽然有自己努力的结果，但不乏有很多幸运的元素。中考高考分别都是自己在初中和高中所有考试中发挥最好的一次，也许总有那种一到关键时候就超长发挥的光环。但我坚信，努力就会有好的结果。</p>
<a id="more"></a>
<p>即将面临毕业的我也是很纠结的，在考研和工作中二选一，最后决定脚踏两条船，还好没有翻船。从9月份开始不断的投递各个公司，陆陆续续投了接近20家。不断的参加宣讲笔试面试、参加宣讲笔试面试……有成功也有失败，两个月的时光转瞬即逝，不得不说，找工作真是一件头疼的事情【其实考研更让我头疼啊！(╯‵□′)╯︵┻━┻】。</p>
<p>…………【此处省略10000字，最后确定下来再填坑】</p>
<p>这两个月完全是在煎熬，找工作的焦急导致心情跌落到了低谷，有一段时间甚至什么都不想干，就坐在那发呆。最后终于在收到某 Offer 后，跌落到低谷的心情瞬间上升到了天堂，一切都放松了下来，可以安心的做一些其他事情了呢~~我相信我的人生才刚刚开始，后面会有更大的挑战在等着我，加油！Fighting！【怎么中二起来了啊！而且文笔也不好啊！(╯‵□′)╯︵┻━┻另外我只想记录下这一天啊！但是又不知道说什么好啊！】</p>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2016/10/20/my-life-is-just-beginning/" title="笑话人生，才刚刚开始">笑话人生，才刚刚开始</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2016/10/20/my-life-is-just-beginning/" title="笑话人生，才刚刚开始">http://www.cylong.com/blog/2016/10/20/my-life-is-just-beginning/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>人生</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 集成 Disqus 评论</title>
    <url>/blog/2017/03/26/hexo-next-disqus/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从创建博客的时候我就纠结用国内的多说还是国外的 Disqus，鉴于多说是国内的，是中文的，而且相比国内其他的系统更加稳定，功能多样，毅然选择了多说。不过后来多说经常崩溃，总是看不到评论，一直想换成 Disqus 或者国内其他的评论系统。这次好了，不用纠结了，用了一年的多说即将在<a href="http://dev.duoshuo.com/threads/58d1169ae293b89a20c57241" title="重要通知: 多说即将关闭" target="_blank" rel="noopener">2017年6月1日关闭服务</a>，不得不换一个。在我刚开始使用 Next 主题的时候，只支持多说和 Disqus，目前已经支持了很多，可以参考：</p>
<blockquote>
<p><a href="http://theme-next.iissnan.com/third-party-services.html" title="Next 第三方服务集成" target="_blank" rel="noopener">Next 第三方服务集成</a></p>
</blockquote>
<p>我后来还是选择了 Disqus 作为新的评论系统，虽然 Disqus 在国内有时候被墙掉了，英文读起来也比较费劲，但是强大的功能和用户体验让我对 Disqus 爱不释手。至于国内也有很多评论系统可以代替多说，但是根据先前的一些系统来看，最后都没有走下去呢╮(╯▽╰)╭。 我觉得 Disqus 不会半路 GG 吧 (╯‵□′)╯︵┻━┻</p>
<a id="more"></a>
<h1 id="Next-主题集成-Disqus"><a href="#Next-主题集成-Disqus" class="headerlink" title="Next 主题集成 Disqus"></a>Next 主题集成 Disqus</h1><ol>
<li>登陆 <a href="https://disqus.com" title="Disqus" target="_blank" rel="noopener">Disqus</a>，点击 <code>GET STARTED</code> 开始创建站点，之后就可以点击右上角的 <code>Admin</code> 进入后台管理。<br><img src="disqus_index.png" alt="Disqus 创建站点"></li>
<li>点击第二条 <code>I want to install Disqus on my site</code>。<br><img src="disqus_intent.png" alt></li>
<li>按照表单填写信息，记住 <code>Website Name</code> 这条属性。<br><img src="disqus_create.png" alt></li>
<li>接下来按照指引填写信息，完成第三步 <code>3.Configure Disqus</code> 后点击最下面 <code>Complete Setup</code> 完成创建。【中间会有一个嵌入代码的案例，不是 Next 主题的可以参考下】<br><img src="disqus_settings.png" alt></li>
<li>接下来配置主题下面的 <code>config.yml</code> 文件。<blockquote>
<p>大于等于5.1.1版本，将 disqus 下的 enable 设定为 true，同时提供您的 shortname。 count 用于指定是否显示评论数量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">disqus:</span><br><span class="line">  enable: true</span><br><span class="line">  shortname:</span><br><span class="line">  count: true</span><br></pre></td></tr></table></figure>
<p>小于5.1.1 版本，设定 disqus_shortname 的值即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">disqus_shortname: shortname</span><br></pre></td></tr></table></figure></blockquote>
</li>
<li>接下来就可以进入后台管理设置你的评论了。</li>
</ol>
<h1 id="多说评论迁移至-Disqus"><a href="#多说评论迁移至-Disqus" class="headerlink" title="多说评论迁移至 Disqus"></a>多说评论迁移至 Disqus</h1><p>毕竟多说我也用了一年，积攒了一点评论，就这样放弃非常的舍不得，不过多说导出的评论文件无法直接导入到 Disqus 中，多说导出的是 JSON 文件，Disqus 支持的导入格式是 WordPress 导出的的 XML 文件。在网上找了一些，发现都不好用，于是自己就造了一个轮子，在下面的链接中有详细的说明。欢迎使用并提出宝贵的意见(●’◡’●)</p>
<blockquote>
<p><a href="/blog/2017/04/05/duoshuo-to-disqus/" title="多说评论迁移至 Disqus">多说评论迁移至 Disqus</a></p>
</blockquote>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2017/03/26/hexo-next-disqus/" title="Hexo 集成 Disqus 评论">Hexo 集成 Disqus 评论</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2017/03/26/hexo-next-disqus/" title="Hexo 集成 Disqus 评论">http://www.cylong.com/blog/2017/03/26/hexo-next-disqus/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 通过 DOM 方式解析、创建 XML</title>
    <url>/blog/2017/04/04/java-dom-xml/</url>
    <content><![CDATA[<hr>
<h1 id="DOM-简介"><a href="#DOM-简介" class="headerlink" title="DOM 简介"></a>DOM 简介</h1><p>DOM（Document Object Model) 是 W3C 处理 XML 的标准 API，不仅 Java 其他很多语言，比如 Javascript、PHP等等语言都实现了该标准。Java 类库支持 DOM 操作【也就是说不需要下载依赖其他包】。DOM 以树状结构组织节点和信息的集合，这种结构允许开发人员对 XML 文档进行增删改查。为了分析该树状结构，我们需要加载整个 XML 文档进行构造分析，所以消耗资源比较大，建议在操作小文件的时候使用。</p>
<a id="more"></a>
<h1 id="创建-XML-文档"><a href="#创建-XML-文档" class="headerlink" title="创建 XML 文档"></a>创建 XML 文档</h1><ol>
<li><p>创建 XML Document 对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建 XML Document 对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> XML Document 对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cylong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2017年4月5日 上午12:19:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Document <span class="title">createXMLDocument</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">    DocumentBuilder builder = <span class="keyword">null</span>;</span><br><span class="line">    Document document = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        builder = factory.newDocumentBuilder();</span><br><span class="line">        document = builder.newDocument();</span><br><span class="line">        Element root = document.createElement(<span class="string">"college"</span>);</span><br><span class="line">        document.appendChild(root);</span><br><span class="line"></span><br><span class="line">        Element student = document.createElement(<span class="string">"student"</span>);</span><br><span class="line">        student.setAttribute(<span class="string">"id"</span>, <span class="string">"0"</span>);</span><br><span class="line">        Element name = document.createElement(<span class="string">"name"</span>);</span><br><span class="line">        name.appendChild(document.createTextNode(<span class="string">"cylong"</span>));</span><br><span class="line">        student.appendChild(name);</span><br><span class="line">        Element biography = document.createElement(<span class="string">"biography"</span>);</span><br><span class="line">        biography.appendChild(document.createCDATASection(<span class="string">"Hello"</span>));</span><br><span class="line">        student.appendChild(biography);</span><br><span class="line">        Element age = document.createElement(<span class="string">"age"</span>);</span><br><span class="line">        age.appendChild(document.createTextNode(<span class="string">"24"</span>));</span><br><span class="line">        student.appendChild(age);</span><br><span class="line"></span><br><span class="line">        Element student1 = document.createElement(<span class="string">"student"</span>);</span><br><span class="line">        student1.setAttribute(<span class="string">"id"</span>, <span class="string">"1"</span>);</span><br><span class="line">        Element name1 = document.createElement(<span class="string">"name"</span>);</span><br><span class="line">        name1.appendChild(document.createTextNode(<span class="string">"cylong1"</span>));</span><br><span class="line">        student1.appendChild(name1);</span><br><span class="line">        Element biography1 = document.createElement(<span class="string">"biography"</span>);</span><br><span class="line">        biography1.appendChild(document.createCDATASection(<span class="string">"World"</span>));</span><br><span class="line">        student1.appendChild(biography1);</span><br><span class="line">        Element age1 = document.createElement(<span class="string">"age"</span>);</span><br><span class="line">        age1.appendChild(document.createTextNode(<span class="string">"25"</span>));</span><br><span class="line">        student1.appendChild(age1);</span><br><span class="line"></span><br><span class="line">        root.appendChild(document.createComment(<span class="string">"学生0"</span>));</span><br><span class="line">        root.appendChild(student);</span><br><span class="line">        root.appendChild(document.createComment(<span class="string">"学生1"</span>));</span><br><span class="line">        root.appendChild(student1);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParserConfigurationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> document;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将创建的 XML Document 写入到文件中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将创建的 XML Document 写入到文件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> document</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> path 文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cylong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2017年4月3日 上午2:39:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeXML</span><span class="params">(Document document, String path)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">	TransformerFactory tf = TransformerFactory.newInstance();</span><br><span class="line">	Transformer transformer = tf.newTransformer();</span><br><span class="line">	DOMSource source = <span class="keyword">new</span> DOMSource(document);</span><br><span class="line">	transformer.setOutputProperty(OutputKeys.ENCODING, <span class="string">"utf8"</span>);</span><br><span class="line">	transformer.setOutputProperty(OutputKeys.INDENT, <span class="string">"yes"</span>);</span><br><span class="line">	PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileOutputStream(path));</span><br><span class="line">	StreamResult result = <span class="keyword">new</span> StreamResult(pw);</span><br><span class="line">    transformer.transform(source, result);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line"> 	e.printStackTrace();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (TransformerException e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="解析-XML-文档"><a href="#解析-XML-文档" class="headerlink" title="解析 XML 文档"></a>解析 XML 文档</h1><ol>
<li><p>解析 XML 文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析 XML 文档</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> path XML 文档路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cylong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2017年4月3日 上午2:48:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parserXML</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">        DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">        Document document = db.parse(path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// optional, but recommended</span></span><br><span class="line">        <span class="comment">// read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work</span></span><br><span class="line">        document.getDocumentElement().normalize();</span><br><span class="line"></span><br><span class="line">        Element root = document.getDocumentElement();</span><br><span class="line">        System.out.println(<span class="string">"Root element : "</span> + root.getNodeName());</span><br><span class="line">        NodeList students = root.getElementsByTagName(<span class="string">"student"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; students.getLength(); i++) &#123;</span><br><span class="line">            Node student = students.item(i);</span><br><span class="line">            System.out.println(student.getNodeName());</span><br><span class="line"></span><br><span class="line">            NodeList info = student.getChildNodes();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; info.getLength(); j++) &#123;</span><br><span class="line">                Node meta = info.item(j);</span><br><span class="line">                <span class="keyword">if</span> (meta.getNodeType() == Node.ELEMENT_NODE) &#123;</span><br><span class="line">                    System.out.println(meta.getNodeName() + <span class="string">":"</span> + meta.getTextContent());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParserConfigurationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SAXException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意<br>可以 <a href="http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work" target="_blank" rel="noopener">点此链接</a> 了解其用处。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// optional, but recommended</span></span><br><span class="line"><span class="comment">// read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work</span></span><br><span class="line">document.getDocumentElement().normalize();</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="参考-amp-感谢"><a href="#参考-amp-感谢" class="headerlink" title="参考&amp;感谢"></a>参考&amp;感谢</h1><blockquote>
<p><a href="https://github.com/cylong1016/CodeJava/blob/master/src/cylong/xml/ParserXML.java" target="_blank" rel="noopener">Github 完整的代码案例</a><br><a href="https://www.mkyong.com/java/how-to-read-xml-file-in-java-dom-parser/" target="_blank" rel="noopener">How to read XML file in Java – (DOM Parser)</a></p>
</blockquote>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2017/04/04/java-dom-xml/" title="Java 通过 DOM 方式解析、创建 XML">Java 通过 DOM 方式解析、创建 XML</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2017/04/04/java-dom-xml/" title="Java 通过 DOM 方式解析、创建 XML">http://www.cylong.com/blog/2017/04/04/java-dom-xml/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>dom</tag>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>多说评论迁移至 Disqus - Java 实现</title>
    <url>/blog/2017/04/05/duoshuo-to-disqus/</url>
    <content><![CDATA[<hr>
<p>在网上找了一圈后，很多人都造过轮子，但是由于年代久远，多说和 Disqus 的评论格式可能发生变化，试了一些后并没有一个成功。无奈自己开始造轮子，不过看完两种评论文件格式后，发现其实还是瞒简单的，于是就用 Java 实现了一个。【为了节省时间就用自己最擅长的 Java 了，虽然其他语言可能会更快更方便的使用( ╯□╰ )】。下面附上工具链接和使用方法。</p>
<blockquote>
<p><a href="https://github.com/cylong1016/DuoshuoToDisqus" title="工具源码地址" target="_blank" rel="noopener">工具源码地址</a></p>
</blockquote>
<a id="more"></a>
<h1 id="导出多说评论"><a href="#导出多说评论" class="headerlink" title="导出多说评论"></a>导出多说评论</h1><ol>
<li>进入多说后台选择 <code>工具-&gt;导出数据</code>。</li>
<li>勾上 <code>包含文章数据</code> 和 <code>包含评论数据</code> 两个选项。</li>
<li>导出后是一个 JSON 文件，为了方便查看可以使用 <a href="http://tool.oschina.net/codeformat/json" title="在线代码格式化" target="_blank" rel="noopener">在线代码格式化</a> 工具。</li>
</ol>
<h1 id="使用工具转化"><a href="#使用工具转化" class="headerlink" title="使用工具转化"></a>使用工具转化</h1><ol>
<li><a href="https://github.com/cylong1016/DuoshuoToDisqus/archive/master.zip" target="_blank" rel="noopener">点击下载</a> 转化工具，并解压。</li>
<li>将导出的多说 JSON 文件重命名为 <code>duoshuo.json</code> 放入 <code>data</code> 文件夹下。【先删除掉存在的文件吧，其实是我的多说评论数据】</li>
<li>双击运行 <code>run.bat</code>。将会在 <code>data</code> 文件夹下生成 <code>duoshuo-format.json</code> 【格式化后的多说评论文件，方便查看】和 <code>disqus.xml</code>【导入到 Disqus 的 XML 文件】。</li>
</ol>
<p><strong>注意：如果发现并没有生成以上的两个文件，或者生成的文件数据有误，请使用以下方式运行程序。</strong></p>
<ol start="5">
<li>按住 <code>Shift</code> + 鼠标右键选择 <code>在此处打开命令行窗口</code>【Windows】或者打开终端进入项目目录下【Linux】。</li>
<li><p>输入以下命令并回车：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar DuoshuoToDisqus.jar</span><br></pre></td></tr></table></figure>
</li>
<li><p>这种方式运行的好处是可以看到程序出错信息，同时你可以在命令最后输入你的多说评论文件路径【就不用将多说评论文件放入到 <code>data</code> 文件夹下了。】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar DuoshuoToDisqus.jar C:\duoshuo.json</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="导入到-Disqus-中"><a href="#导入到-Disqus-中" class="headerlink" title="导入到 Disqus 中"></a>导入到 Disqus 中</h1><ol>
<li><a href="https://import.disqus.com/" title="Import and Export - Disqus" target="_blank" rel="noopener">点击链接</a> 进入到导入页面，选择你要导入评论的站点。</li>
<li>选择刚刚生成的 <code>disqus.xml</code> 文件，后面的选项选择 <code>WordPress(WXR)</code>，点击 <code>Upload</code>。</li>
<li>接下来静静的等待导入完成，可以看到导入的评论和文章数量，如果出错的话可以看到错误。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>整个工具其实就是解析多说的 JSON 文件并转化成 Disqus 评论的 XML 文件。想要自己用 Java 实现的可以参考以下链接：</p>
<blockquote>
<p><a href="http://dev.duoshuo.com/docs/500fc3cdb17b12d24b00000a" title="多说评论格式" target="_blank" rel="noopener">多说评论格式</a><br><a href="https://help.disqus.com/customer/portal/articles/472150-custom-xml-import-format" title="Custom XML Import Format" target="_blank" rel="noopener">Disqus 评论格式</a><br><a href="/blog/2017/03/31/jackson-java-json/" title="Jackson - Java Object 与 JSON 之间的转化工具">Jackson - Java Object 与 JSON 之间的转化工具</a><br><a href="/blog/2017/04/04/java-dom-xml/" title="Java 通过 DOM 方式解析、创建 XML">Java 通过 DOM 方式解析、创建 XML</a><br><a href="https://github.com/cylong1016/DuoshuoToDisqus" title="工具源码地址" target="_blank" rel="noopener">工具源码地址</a></p>
</blockquote>
<p>此工具需要 Java 运行环境，可以去网上搜索安装配置一下。另外此工具没有做什么非法输入的处理，所以不要尝试做一些奇怪的事情。如果运行出错请检查一下你的源多说 JSON 文件是否有错误或者使用方式是否有错，有任何问题或者想要我帮忙转化的请在下方留言或者 <a href="/about/" title="关于我">联系我</a>。很高兴可以帮助到你(●’◡’●)。</p>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2017/04/05/duoshuo-to-disqus/" title="多说评论迁移至 Disqus - Java 实现">多说评论迁移至 Disqus - Java 实现</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2017/04/05/duoshuo-to-disqus/" title="多说评论迁移至 Disqus - Java 实现">http://www.cylong.com/blog/2017/04/05/duoshuo-to-disqus/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>java</tag>
        <tag>disqus</tag>
      </tags>
  </entry>
  <entry>
    <title>Jackson - Java Object 与 JSON 之间的转化工具</title>
    <url>/blog/2017/03/31/jackson-java-json/</url>
    <content><![CDATA[<hr>
<p>一直在找一个 Java Object 与 JSON 之间方便快捷的转化工具，在舍友的推荐下了解到了 Jackson，使用之后对其爱不释手，现在推荐给大家。</p>
<h1 id="JSON-简介"><a href="#JSON-简介" class="headerlink" title="JSON 简介"></a>JSON 简介</h1><blockquote><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。 易于人阅读和编写。同时也易于机器解析和生成。 它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。 这些特性使JSON成为理想的数据交换语言。</p>
<footer><strong>JSON 中文</strong><cite><a href="http://www.json.org/json-zh.html" target="_blank" rel="noopener">介绍 JSON</a></cite></footer></blockquote>
<p>以上链接中包含了 JSON 的详细介绍，其实 JSON 对象【”名称/值”对的集合】和 Java 对象是对应的，JSON 数组【值的有序列表】和 Java 的数组是对应的。下面就用一些具体的实例來说明。</p>
<a id="more"></a>
<h1 id="JSON-和-Java-的映射"><a href="#JSON-和-Java-的映射" class="headerlink" title="JSON 和 Java 的映射"></a>JSON 和 Java 的映射</h1><ol>
<li><p>JSON 示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;cylong&quot;,</span><br><span class="line">  &quot;age&quot; : 33,</span><br><span class="line">  &quot;position&quot; : &quot;Developer&quot;,</span><br><span class="line">  &quot;salary&quot; : 7500,</span><br><span class="line">  &quot;skills&quot; : [ &quot;java&quot;, &quot;python&quot; ],</span><br><span class="line">  &quot;date&quot; : &quot;2017-03-31 12:29:42&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对应的 Java 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Staff</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="keyword">private</span> String position;</span><br><span class="line">  <span class="keyword">private</span> BigDecimal salary;</span><br><span class="line">  <span class="keyword">private</span> List&lt;String&gt; skills;</span><br><span class="line">  <span class="comment">// Jackson 语法</span></span><br><span class="line">  <span class="meta">@JsonFormat</span>(shape = JsonFormat.Shape.STRING, pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>, timezone = <span class="string">"GMT+8"</span>)</span><br><span class="line">  <span class="keyword">private</span> Date date;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getter and setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>相信以上的例子可以让你很好的理解两者之间的对应关系。其实不仅 Java，其他语言也类似。</p>
<h1 id="Jackson-使用"><a href="#Jackson-使用" class="headerlink" title="Jackson 使用"></a>Jackson 使用</h1><ol>
<li>在 <code>pom.xml</code> 中添加依赖项<figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Java 对象转化成 JSON</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">Staff obj = <span class="keyword">new</span> Staff();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 Java 对象转化成 JSON 并写入文件中</span></span><br><span class="line">mapper.writeValue(<span class="keyword">new</span> File(<span class="string">"c:\\file.json"</span>), obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 Java 对象转化成 JSON 字符串</span></span><br><span class="line">String jsonInString = mapper.writeValueAsString(obj);</span><br></pre></td></tr></table></figure>
</li>
<li><p>JSON 转化成 Java 对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">String jsonInString = <span class="string">"&#123;'name' : 'mkyong'&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从文件中读取 JSON 并转化成 Java 对象</span></span><br><span class="line">Staff obj = mapper.readValue(<span class="keyword">new</span> File(<span class="string">"c:\\file.json"</span>), Staff<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 URL 中读取 JSON 并转化成 Java 对象</span></span><br><span class="line">Staff obj = mapper.readValue(<span class="keyword">new</span> URL(<span class="string">"http://mkyong.com/api/staff.json"</span>), Staff<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 JSON 字符串转化成 Java 对象</span></span><br><span class="line">Staff obj = mapper.readValue(jsonInString, Staff<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="参考-amp-感谢"><a href="#参考-amp-感谢" class="headerlink" title="参考&amp;感谢"></a>参考&amp;感谢</h1><p>其实以上的内容在下面的链接中均有详细的介绍，我只是一个代码的搬运工( ╯□╰ )，就当是自己的笔记好了。</p>
<blockquote>
<p><a href="https://www.mkyong.com/java/jackson-2-convert-java-object-to-from-json/" title="Jackson 2 – Convert Java Object to / from JSON" target="_blank" rel="noopener">Jackson 2 – Convert Java Object to / from JSON</a> 【Jackson 使用详细教程】<br><a href="http://www.baeldung.com/jackson-serialize-dates" title="Jackson Date" target="_blank" rel="noopener">Jackson Date</a> 【有关 Jackson 对日期的处理】<br><a href="http://www.json.org/json-zh.html" title="JSON 中文文档" target="_blank" rel="noopener">JSON 中文文档</a> 【概念性的东西，最下面也有不同语言的支持】<br><a href="http://wiki.jikexueyuan.com/project/json/" title="JSON 教程 - 极客学院" target="_blank" rel="noopener">JSON 教程 - 极客学院</a> 【包含 JSON 基础介绍和在其他语言中使用 JSON】</p>
</blockquote>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2017/03/31/jackson-java-json/" title="Jackson - Java Object 与 JSON 之间的转化工具">Jackson - Java Object 与 JSON 之间的转化工具</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2017/03/31/jackson-java-json/" title="Jackson - Java Object 与 JSON 之间的转化工具">http://www.cylong.com/blog/2017/03/31/jackson-java-json/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jackson</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome 配置 SwitchyOmega</title>
    <url>/blog/2017/04/09/chrome-SwitchyOmega/</url>
    <content><![CDATA[<hr>
<p>此文章是以 Shadowsocks 代理为例，若想使用 Shadowsocks 请先安装对应系统的客户端并启动。详情请参考：</p>
<blockquote>
<p><a href="/blog/2016/05/26/shadowsocks/" title="站在 Shadowsocks 的肩膀上发现精彩的世界">站在 Shadowsocks 的肩膀上发现精彩的世界</a></p>
</blockquote>
<h1 id="Chrome-浏览器"><a href="#Chrome-浏览器" class="headerlink" title="Chrome 浏览器"></a>Chrome 浏览器</h1><p>无论是用户体验、强大的功能还是丰富的扩展程序都完爆国内的各种浏览器好不好(╯‵□′)╯︵┻━┻。强烈推荐啊！目前已经可以在不翻墙的情况下去 <a href="http://www.google.cn/chrome/browser/desktop/index.html" title="Chrome（桌面版）" target="_blank" rel="noopener">下载 Chrome（桌面版）</a>了，账号数据同步方面也不需要翻墙了。【鼓掌撒花<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。】</p>
<h1 id="SwitchyOmega"><a href="#SwitchyOmega" class="headerlink" title="SwitchyOmega"></a>SwitchyOmega</h1><p>Google Chrome 浏览器上的一个代理扩展程序，可以轻松快捷地管理和切换多个代理设置。比如我们接下来要介绍的 <code>自动切换模式</code>。</p>
<a id="more"></a>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>点击 <a href="https://github.com/FelisCatus/SwitchyOmega/releases" title="FelisCatus/SwitchyOmega" target="_blank" rel="noopener">Github-SwitchyOmega</a>，下载页面有详细的安装教程，仔细看一下就好。</p>
<h2 id="配置-Shadowsocks-情景模式"><a href="#配置-Shadowsocks-情景模式" class="headerlink" title="配置 Shadowsocks 情景模式"></a>配置 Shadowsocks 情景模式</h2><ol>
<li>打开 Chrome， 点击右上角的 <span class="fa fa-globe" aria-hidden="true"></span> 图标，再点击 <code>选项</code>。<br><img src="Shadowsocks-icon.png" alt="Shadowsocks 图标"></li>
<li>点击左侧的 <code>新建情景模式</code>，输入情景模式名称 <code>Shadowsocks</code>【自己任意设置名称】，类型选择第一个<code>代理服务器</code>。创建完成后做如下配置：<br><img src="new.png" alt="新建情景模式"><br>你也可以自己设置不代理的地址列表。如上图。</li>
<li>保存后你就可以通过这个情景模式科学上网了~</li>
</ol>
<h2 id="配置自动切换模式"><a href="#配置自动切换模式" class="headerlink" title="配置自动切换模式"></a>配置自动切换模式</h2><p>配置好 Shadowsocks 情景模式后虽然可以使用 Chrome 浏览器科学上网了，但是这样的话无论你访问什么网站都会走代理，有时候访问国内的一些网站反而会很慢，这时候自动切换模式就解决了这个问题。下面介绍一下如何配置自动切换模式。</p>
<ol>
<li>点击左侧的 <code>自动切换</code>，或者自己新建情景模式，类型选择第二个 <code>自动切换模式</code>。然后做如下配置：<br><img src="auto.png" alt="自动切换模式"></li>
</ol>
<ul>
<li><code>切换规则</code> 是在访问 <code>条件设置</code> 的域名时候使用后面设置的 <code>情景模式</code>。比如图中我设置 <code>*.google.com</code> 和 <code>*.github.com</code> 使用 <code>Shadowsocks</code> 情景模式【刚刚创建的那个情景模式】。我们可以点击 <code>添加条件</code> 来添加自己的规则。</li>
<li>将图中 <code>规则列表规则</code> 前面的框打√，再将后面的 <code>情景模式</code> 设置为 <code>Shadowsocks</code>，意思是规则列表中的内容，我们使用 <code>Shadowsocks</code> 情景模式。然后 <code>规则列表设置</code> 中：<ul>
<li>规则列表格式： AutoProxy；</li>
<li>规则列表网址： <a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt" target="_blank" rel="noopener">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a></li>
</ul>
</li>
<li>这样设置完成 <code>规则列表规则</code> 后就不需要在切换规则中一个一个添加条件了。</li>
<li><code>切换规则</code> 最后一行的 <code>默认情景模式</code> 代表不在规则列表中网址我们使用 <code>直接连接</code> 情景模式，也就是说不走代理。</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<p><a href="https://github.com/FelisCatus/SwitchyOmega" title="FelisCatus/SwitchyOmega" target="_blank" rel="noopener">Github-SwitchyOmega</a><br><a href="https://github.com/gfwlist/gfwlist" title="gfwlist/gfwlist" target="_blank" rel="noopener">Github-gfwlist</a></p>
</blockquote>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2017/04/09/chrome-SwitchyOmega/" title="Chrome 配置 SwitchyOmega">Chrome 配置 SwitchyOmega</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2017/04/09/chrome-SwitchyOmega/" title="Chrome 配置 SwitchyOmega">http://www.cylong.com/blog/2017/04/09/chrome-SwitchyOmega/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>Shadowsocks</category>
      </categories>
      <tags>
        <tag>shadowsocks</tag>
        <tag>翻墙</tag>
        <tag>SwitchyOmega</tag>
      </tags>
  </entry>
  <entry>
    <title>三数之和</title>
    <url>/blog/2020/05/30/three-sum/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c，使得 a + b + c = 0？请你找出所有满足条件且不重复的三元组。</p>
<p>注意：答案中不可以包含重复的三元组。</p>
<p><strong>示例:</strong></p>
<blockquote>
<p>给定数组 nums = [-1, 0, 1, 2, -1, -4]，<br>满足要求的三元组集合为：<br>[[-1, 0, 1], [-1, -1, 2]]</p>
</blockquote>
<a id="more"></a>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p> 之前做过<a href="https://leetcode-cn.com/problems/two-sum" title="两数之和 | 力扣（LeetCode）" target="_blank" rel="noopener">两数之和</a>这道题，所以第一想法就是转化成两次两数之和解决，思路就是先求 b + c 两数之和 z，再求 a + z 两数之和等于0，也就是相反数。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 求出两数之和的组合，和为-nums[i]</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; twoSumList = twoSum(nums, i + <span class="number">1</span>, -nums[i]);</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; list : twoSumList) &#123;</span><br><span class="line">            list.add(nums[i]);</span><br><span class="line">            Collections.sort(list);</span><br><span class="line">            result.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.stream().distinct().collect(Collectors.toList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> index, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; nums.length; i++) &#123;</span><br><span class="line">        map.put(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> complement = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(complement) &amp;&amp; map.get(complement) != i) &#123;</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            list.add(nums[i]);</span><br><span class="line">            list.add(nums[map.get(complement)]);</span><br><span class="line">            result.add(list);</span><br><span class="line">            <span class="comment">// 去重，防止重复执行超时</span></span><br><span class="line">            map.remove(nums[i]);</span><br><span class="line">            map.remove(complement);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 其实这道题有更好的解法，受之前两数之和的影响，两数之和的那道题，是没法给数组排序的，因为输出是数组下标，而这道题，输出是三元组，可以进行数组排序的，以下是来自LeetCode的题解：</p>
<ul>
<li>首先对数组进行排序，排序后固定一个数 nums[i]，再使用左右指针指向 nums[i] 后面的两端，数字分别为 nums[L] 和 nums[R]，计算三个数的和 sum 判断是否满足为 0，满足则添加进结果集。</li>
<li>如果 nums[i]大于 0，则三数之和必然无法等于 0，结束循环。</li>
<li>如果 nums[i] == nums[i−1]，则说明该数字重复，会导致结果重复，所以应该跳过。</li>
<li>当 sum == 0 时，nums[L] == nums[L+1] 则会导致结果重复，应该跳过，L++。</li>
<li><p>当 sum == 0 时，nums[R] == nums[R−1] 则会导致结果重复，应该跳过，R−−。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">   List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">   <span class="keyword">int</span> len = nums.length;</span><br><span class="line">   <span class="keyword">if</span> (nums == <span class="keyword">null</span> || len &lt; <span class="number">3</span>)</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   Arrays.sort(nums);</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">       <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">break</span>; <span class="comment">// 如果当前数字大于0，则三数之和一定大于0，所以结束循环</span></span><br><span class="line">       <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>])</span><br><span class="line">           <span class="keyword">continue</span>; <span class="comment">// 去重</span></span><br><span class="line">       <span class="keyword">int</span> L = i + <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">int</span> R = len - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">while</span> (L &lt; R) &#123;</span><br><span class="line">           <span class="keyword">int</span> sum = nums[i] + nums[L] + nums[R];</span><br><span class="line">           <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</span><br><span class="line">               res.add(Arrays.asList(nums[i], nums[L], nums[R]));</span><br><span class="line">               <span class="keyword">while</span> (L &lt; R &amp;&amp; nums[L] == nums[L + <span class="number">1</span>])</span><br><span class="line">                   L++; <span class="comment">// 去重</span></span><br><span class="line">               <span class="keyword">while</span> (L &lt; R &amp;&amp; nums[R] == nums[R - <span class="number">1</span>])</span><br><span class="line">                   R--; <span class="comment">// 去重</span></span><br><span class="line">               L++;</span><br><span class="line">               R--;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>)</span><br><span class="line">               L++;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; <span class="number">0</span>)</span><br><span class="line">               R--;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h1><blockquote>
<p><a href="https://leetcode-cn.com/problems/3sum" title="三数之和 | 力扣（LeetCode）" target="_blank" rel="noopener">三数之和 | 力扣（LeetCode）</a><br><a href="https://leetcode-cn.com/problems/3sum/solution/hua-jie-suan-fa-15-san-shu-zhi-he-by-guanpengchn/" title="三数之和 | 题解 | guanpengchn]" target="_blank" rel="noopener">三数之和 | 题解 | guanpengchn</a></p>
</blockquote>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2020/05/30/three-sum/" title="三数之和">三数之和</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2020/05/30/three-sum/" title="三数之和">http://www.cylong.com/blog/2020/05/30/three-sum/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>leetcode</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言头文件使用总结</title>
    <url>/blog/2018/06/25/c-header/</url>
    <content><![CDATA[<hr>
<p>在平时工作中看到前人写的一些C头文件，很有感触。自己在写的时候也遇到了很多问题，比如重复引用导致宏或者常量重复定义，不知道该使用双引号还是使用尖括号引用等问题，决定先总结一下。做个笔记，随时复习。o(￣▽￣)ブ</p>
<h1 id="C语言头文件"><a href="#C语言头文件" class="headerlink" title="C语言头文件"></a>C语言头文件</h1><p>C语言头文件一般包含了函数声明，宏定义，常量等代码。我们在使用#include引用头文件。可以被多个c文件引用，避免了重复代码，减少了错误。让代码更加规范。<br>A simple practice in C 或 C++ 程序中，建议把所有的常量、宏、系统全局变量和函数原型写在头文件中，在需要的时候随时引用这些头文件。</p>
<a id="more"></a>
<h1 id="头文件引用"><a href="#头文件引用" class="headerlink" title="头文件引用"></a>头文件引用</h1><p>系统已经存在了很多头文件，当然，我们也可以自己编写。c文件引用头文件相当于直接复制到文件中，但是这样多个文件要使用这段代码的时候，就产生了很多重复代码，也不方便管理。引用存在两种引用形式。一种<code>#include &quot;cylong.h&quot;</code>，一种是 <code>#include &lt;cylong.h&gt;</code>。那这两种方式有什么区别呢？我们平时使用的时候又怎么用呢？</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cylong.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>这种形式是引用系统文件，在系统目录下搜索此头文件。比如<code>#include &lt;stdio.h&gt;</code>等</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cylong.h"</span></span></span><br></pre></td></tr></table></figure>
<p>这种形式是引用用户文件，优先在当前目录下搜索此头文件，然后再去系统目录下搜索此头文件。</p>
<p>所以无论是我们自己写的头文件还是引用系统头文件，使用<code>#include &quot;cylong.h&quot;</code>都不会出错。但是这样并不标准，标准规定，<b>包含标准头文件或系统头文件时应使用尖括号，包含自定义头文件时可使用双引号。</b></p>
<h1 id="避免重复引用"><a href="#避免重复引用" class="headerlink" title="避免重复引用"></a>避免重复引用</h1><p>经常在写代码的时候，不经意间，我们会引用同一个头文件两次，那么我们会遇到很多重复定义的错误，为了避免这样的事情发生，我们需要将头文件里的内容放到编译宏中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CYONG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CYLONG_H</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span> <span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// some codes</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> CYLONG_H</span></span><br></pre></td></tr></table></figure>
<p>当我们第一次引用的时候，未定义<code>CYLONG_H</code>宏，所以会继续编译下面的代码，当第二次引用的时候，<code>#ifndef CYLONG_H</code>为假，就不会编译下面的代码了，自然不会存在重复定义等问题。</p>
<h1 id="公共头文件"><a href="#公共头文件" class="headerlink" title="公共头文件"></a>公共头文件</h1><p>在程序代码中，经常很多c文件会引用一些相同的头文件，这个时候，我们就可以定义一个包含这些相同头文件的头文件<code>common.h</code>。例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> COMMON_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COMMON_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cylong.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lsyu.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> COMMON_H</span></span><br></pre></td></tr></table></figure>
<p>然后我们就可以在每个需要的c文件中引用这个<code>common.h</code>头文件。但是需要注意的是，这个文件里除了头文件引用以外，建议不要再写其他的代码。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<p><a href="http://www.runoob.com/cprogramming/c-header-files.html" title="C 头文件 | 菜鸟教程" target="_blank" rel="noopener">C 头文件 | 菜鸟教程</a><br><a href="http://c.biancheng.net/cpp/biancheng/view/66.html" title="C++ #include—尖括号和双引号的区别 | C语言中文网" target="_blank" rel="noopener">C++ #include—尖括号和双引号的区别 | C语言中文网</a></p>
</blockquote>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2018/06/25/c-header/" title="C语言头文件使用总结">C语言头文件使用总结</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2018/06/25/c-header/" title="C语言头文件使用总结">http://www.cylong.com/blog/2018/06/25/c-header/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>头文件</tag>
      </tags>
  </entry>
  <entry>
    <title>2018年立个FLAG-坚持写博客！</title>
    <url>/blog/2018/06/24/new-2018/</url>
    <content><![CDATA[<hr>
<p>时隔一年，终于想起来还有博客这种事情。工作忙的昏天黑地，但是又学不到什么太多的东西，看到很多周围的同学变得越来越厉害，有自己的目标，我也不想一直这样平淡的度过，总的想点提升不是？开始为自己的将来做准备吧！</p>
<p>FLAG我就立在这了！一定要坚持下去！积少成多！(╯‵□′)╯︵┻━┻<br><a id="more"></a></p>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2018/06/24/new-2018/" title="2018年立个FLAG-坚持写博客！">2018年立个FLAG-坚持写博客！</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2018/06/24/new-2018/" title="2018年立个FLAG-坚持写博客！">http://www.cylong.com/blog/2018/06/24/new-2018/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>愚人节快乐</title>
    <url>/blog/2019/04/01/april-fools-day/</url>
    <content><![CDATA[<hr>
<p>事情起因是看到一个面试题，原题大概是，生成 N 个 1 到 1000 之间的随机数(N &lt;= 1000)，对于重复的数字，只取其中一个，并对结果进行从小到大排序。正好前几天了解了下 Java 的 Lambda 表达式和 Stream API，突然想起来，这可以一行代码搞定啊。于是就尝试的写了一下。【原题还是比较复杂的，我就提取了精华部分】</p>
<a id="more"></a>
<p>一行代码能搞定的事情从不会多写【为了美观我还是换行了】。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IntStream.range(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">    .map(x -&gt; (<span class="keyword">int</span>)(Math.random() * <span class="number">1000</span> + <span class="number">1</span>))</span><br><span class="line">    .distinct()</span><br><span class="line">    .sorted()</span><br><span class="line">    .forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<p>自从 Java 8 增加了 Lambda 表达式和 Stream API 后，很多操作都非常的方便，可以参考我上一篇博客：</p>
<blockquote>
<p><a href="http://www.cylong.com/blog/2019/03/18/lambda/" title="Java 8 的 Lambda 表达式和 Stream API | 笑话人生">Java 8 的 Lambda 表达式和 Stream API | 笑话人生</a></p>
</blockquote>
<p><span style="background-color:#000000">其实这就是一篇愚人节凑数用的博客，顺便祝愿下女票可以找到心仪的实习，相信自己，努力终将不会白费 (^_^)</span></p>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2019/04/01/april-fools-day/" title="愚人节快乐">愚人节快乐</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2019/04/01/april-fools-day/" title="愚人节快乐">http://www.cylong.com/blog/2019/04/01/april-fools-day/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>随笔</tag>
        <tag>lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>520·答辩·校庆·校园文化夜·非酋高级成就</title>
    <url>/blog/2017/05/20/520/</url>
    <content><![CDATA[<hr>
<p>经过了几个月的时间，终于完成了大学的最后一项任务：毕业设计（包括毕业项目和毕业论文）。当然，答辩这天正好赶上校庆，赶上校园文化夜，赶上期待已久的阴阳师高级非酋成就。赶上一切的一切。这一天给我的惊喜太多，给我的纪念太多，这一天，应该是本科毕业前第一个有意义的一天（以后还有毕业典礼什么的啊！o(<em>￣▽￣</em>)ブ）必须把这么重要的一天记下来！【以下图片都是手机拍摄的！原谅我的渣画质！】</p>
<a id="more"></a>
<h1 id="毕业答辩"><a href="#毕业答辩" class="headerlink" title="毕业答辩"></a>毕业答辩</h1><p>之前还在想，这是大学最后一次“作业”了，而且并不是那么容易。没想到真投入进去的时候，好像并没有那么难。之前还听学长说论文有多难写，要修改很多遍。答辩时还有人不过，等着第二次答辩。但真正自己做起来，投入进去后，就不会有什么担心了，写完论文的时候，我还在想，我竟然不知不觉写了这么多字。为了防止学校查重不过，自己还花了钱提前查重！进到答辩现场的时候，说不紧张是肯定没人信的，好歹评审老师是那种比较逗逼的人（CZY &amp; LJ），并没有给学生太大的压力。一下午竟然就这么快过去了！宣布通过名单的时候还是难以置信，自己就这样要毕业了呢，以至于后面我一直问思思姐，我真的过了么？可以毕业了么？其实只要自己认真做了，毕业还是很简单的。最重要的一点是！我忘记拍照留念了啊！还是当时太紧张了啊！(╯‵□′)╯︵┻━┻</p>
<h1 id="校庆"><a href="#校庆" class="headerlink" title="校庆"></a>校庆</h1><p>520这天还是南大的校庆，每次校庆，学校都会发两张5元餐券，以前一直都是用一张留一张纪念，但是后来都找不到了呢！所以这次要拍照留念！哈哈哈哈！(●’◡’●)</p>
<p><img src="520校庆餐券.jpg" alt="520校庆餐券"></p>
<p>答辩完出来的时候看到了热烈庆祝南京大学建校115周年的展板【其实去答辩的时候就看到了，但那个时候谁还有心思拍照呢？】不完美的是展板上写满了祝福的话或者名字啥的，虽然大家并无恶意，不过整个展板拍照后就感觉好乱╮(╯▽╰)╭</p>
<p><img src="校庆.jpg" alt="校庆"></p>
<h1 id="非酋高级成就"><a href="#非酋高级成就" class="headerlink" title="非酋高级成就"></a>非酋高级成就</h1><p>就在去仙林校区【我在鼓楼校区】参加校园文化夜的地铁上，思思姐帮我抽卡，庆祝下答辩完成。意料之内的没有SSR，但是发现拿到了期待已久的高级非酋成就！【抽卡400张没有SSR的成就】虽然这是非洲人的一种表现，但是我早就习惯了呢，而且我在意的是500连抽没有SSR的非洲阴阳师成就，会送一个稀有头像框——月见黑。这比抽到SSR的概率低的多啊。</p>
<p><img src="非酋高级成就.jpg" alt="非酋高级成就"></p>
<h1 id="校园文化夜"><a href="#校园文化夜" class="headerlink" title="校园文化夜"></a>校园文化夜</h1><p>这是大学四年里第三次参加了，也是最后一次。大一大二就在仙林，每年都会参加，大三搬到鼓楼，有事耽搁了一次没去。文化夜还是老样子，社团、院系都有自己的展台，在宿舍区中间的路上。先去领盖章的一页纸，每去一个展台玩小游戏都会帮你盖章，然后去领奖品。由于答辩结束的比较晚，去到仙林都已经快8点了，首先当然是找软院的展台啊！我和思思姐正玩着呢，突然看到有人坐在电脑前，玩着小游戏。我就好奇的凑过去，这不是软院的传统，大一时候程序设计大赛做的小游戏么？赶紧上去试玩了一下，相比之下，真的比我当时做的好多了呢，长江后浪推前浪啊~接下来看到了漂亮的汉服社小姐姐，思思姐每次来都会试穿汉服让我拍照呢。</p>
<p><img src="大四穿汉服的思思姐.jpg" alt="大四穿汉服的思思姐"></p>
<p>下面这张是从思思姐那要来的大一时候穿汉服的思思姐，因为那个时候还没在一起呢。【// 相比之下是不是胖了好多！つ﹏⊂】</p>
<p><img src="大一穿汉服的思思姐.jpg" alt="大一穿汉服的思思姐"></p>
<p>后来又遇到了一个听歌识曲的游戏，我问他，有动漫方面的么？他先放了一首魔卡少女樱的主题曲，又放了一首四驱兄弟的主题曲，都被我猜到了，毕竟这都是童年呢！最后放了一首虹猫蓝兔七侠传，我竟然没听出来，看来要补番了！没逛几个展台，发现大家基本上都在收拾东西，差不多结束了，我和思思姐准备去换礼物了，然后……工作人员说礼物已经发完了。(╯‵□′)╯︵┻━┻</p>
<h1 id="520"><a href="#520" class="headerlink" title="520"></a>520</h1><p>520这天怎么少得了秀恩爱呢！毕设一起做、一起答辩、一起去仙林参加校园文化夜，感谢思思姐一直的陪伴。以后也会是开开心心的每一天呢(<em>^_^</em>)</p>
<p><img src="回来的地铁上.jpg" alt="回来的地铁上"></p>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2017/05/20/520/" title="520·答辩·校庆·校园文化夜·非酋高级成就">520·答辩·校庆·校园文化夜·非酋高级成就</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2017/05/20/520/" title="520·答辩·校庆·校园文化夜·非酋高级成就">http://www.cylong.com/blog/2017/05/20/520/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>两数之和</title>
    <url>/blog/2019/11/06/two-sum/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p>
<p><strong>示例:</strong></p>
<blockquote>
<p>给定 nums = [2, 7, 11, 15], target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>
</blockquote>
<a id="more"></a>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>使用哈希表将会使问题特别简单，首先，我们将使用一次遍历将数组中的元素加入到Map中，key是当前元素的值，value是当前元素的索引。接下来，我们进行第二次遍历，第二次遍历我们将查找当前元素的目标元素（target−nums[i]）是否在Map中，如果在，即找到目标值，返回两个元素的索引。注意一点的是，目标元素不能是当前元素！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        map.put(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> complement = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(complement) &amp;&amp; map.get(complement) != i) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, map.get(complement)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际上，我们把上面的两步合成一步，只用一次遍历即可完成，当遍历到第i个值后，我们把此元素的需要的目标值保存到Map中，后续遍历，找到目标的值，即完成遍历。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(nums.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(nums[i])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;map.get(nums[i]), i&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(target - nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h1><blockquote>
<p><a href="https://leetcode-cn.com/problems/two-sum" title="两数之和 | 力扣（LeetCode）" target="_blank" rel="noopener">两数之和 | 力扣（LeetCode）</a><br><a href="https://leetcode-cn.com/problems/two-sum/solution/liang-shu-zhi-he-by-leetcode-2/" title="两数之和 | 题解" target="_blank" rel="noopener">两数之和 | 题解</a></p>
</blockquote>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2019/11/06/two-sum/" title="两数之和">两数之和</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2019/11/06/two-sum/" title="两数之和">http://www.cylong.com/blog/2019/11/06/two-sum/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>leetcode</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 8 的 Lambda 表达式和 Stream API</title>
    <url>/blog/2019/03/18/lambda/</url>
    <content><![CDATA[<hr>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Java 8 的 Lambda 表达式提供了强大的函数化的编程能力，将函数作为参数传递进方法中。免去了使用匿名方法的麻烦，这样使可读性更好，表达更清晰。它是推动 Java 8 发布的最重要新特性。Lambda 表达式的简洁让人非常激动，但是如果第一次看到一段复杂的Lambda表达式的代码，会让你非常头疼，对于初学者来说，可能就是一段垃圾代码，因为你并不知道 Lambda 表达式到底在表达什么╮(╯▽╰)╭下面我们就举一些小例子由浅入深的了解下 Lambda 表达式。</p>
<a id="more"></a>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p><code>(parameters) -&gt; expression</code> 或者 <code>(parameters) -&gt;{ statements; }</code></p>
<p>个人理解，把 Lambda 表达式看成咱们上学的时候学的函数 <code>f(x) = x + 1</code> 会让你更容易理解。</p>
<p>以下是lambda表达式的重要特征:</p>
<ul>
<li><b>可选类型声明：</b>不需要声明参数类型，编译器可以统一识别参数值。</li>
<li><b>可选的参数圆括号：</b>一个参数无需定义圆括号，但多个参数需要定义圆括号。</li>
<li><b>可选的大括号：</b>如果主体包含了一个语句，就不需要使用大括号。</li>
<li><b>可选的返回关键字：</b>如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。</li>
</ul>
<h1 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Greeting</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">(String msg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, Operation operation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> operation.calc(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(String msg, Greeting greeting)</span> </span>&#123;</span><br><span class="line">        greeting.say(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 类型声明</span></span><br><span class="line">        Operation addition = (<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; a + b;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不用类型声明</span></span><br><span class="line">        Operation subtraction = (a, b) -&gt; a - b;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 大括号中的返回语句。</span></span><br><span class="line">        <span class="comment">// 一般只有存在多行语句的时候才会使用，单行语句不需要使用，部分IDE会提示去掉大括号。</span></span><br><span class="line">        Operation multiplication = (<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> a * b;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没有大括号及返回语句</span></span><br><span class="line">        Operation division = (<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; a / b;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"10 + 5 = "</span> + LambdaTest.calc(<span class="number">10</span>, <span class="number">5</span>, addition));</span><br><span class="line">        System.out.println(<span class="string">"10 - 5 = "</span> + LambdaTest.calc(<span class="number">10</span>, <span class="number">5</span>, subtraction));</span><br><span class="line">        System.out.println(<span class="string">"10 x 5 = "</span> + LambdaTest.calc(<span class="number">10</span>, <span class="number">5</span>, multiplication));</span><br><span class="line">        System.out.println(<span class="string">"10 / 5 = "</span> + LambdaTest.calc(<span class="number">10</span>, <span class="number">5</span>, division));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不用括号</span></span><br><span class="line">        Greeting sayHello = message -&gt; System.out.println(<span class="string">"Hello "</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用括号</span></span><br><span class="line">        Greeting sayBye = (message) -&gt; System.out.println(<span class="string">"Bye "</span> + message);</span><br><span class="line"></span><br><span class="line">        LambdaTest.say(<span class="string">"cylong"</span>, sayHello);</span><br><span class="line">        LambdaTest.say(<span class="string">"cylong"</span>, sayBye);</span><br><span class="line">        LambdaTest.say(<span class="string">"cylong"</span>, message -&gt; System.out.println(<span class="string">"Hi "</span> + message));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 以前的匿名类</span></span><br><span class="line">        LambdaTest.say(<span class="string">"cylong"</span>, <span class="keyword">new</span> Greeting() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"Hello "</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码的输出为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 + 5 = 15</span><br><span class="line">10 - 5 = 5</span><br><span class="line">10 x 5 = 50</span><br><span class="line">10 / 5 = 2</span><br><span class="line">Hello cylong</span><br><span class="line">Bye cylong</span><br><span class="line">Hello cylong</span><br><span class="line">Hello cylong</span><br></pre></td></tr></table></figure>
<h1 id="Java-8-的-Stream-API"><a href="#Java-8-的-Stream-API" class="headerlink" title="Java 8 的 Stream API"></a>Java 8 的 Stream API</h1><p>其实目前用 Lambda 表达式最多的地方就是 Java 8 的新特性——Stream API，借助于 Lambda 表达式，极大的提高编程效率和程序可读性。同时它提供串行和并行两种模式进行汇聚操作，并发模式能够充分利用多核处理器的优势，使用 fork/join 并行方式来拆分任务和加速处理过程。Java 8 中的 Stream 是对集合（Collection）对象功能的增强，Stream 不是集合元素，它不是数据结构并不保存数据，它是有关算法和计算的。在以前的 Java API中，我们更多的是使用for或者Iterator来遍历集合，同时我们可能会对集合里的数据进行过滤，计算等等处理，导致代码量非常的多，还容易出错。而使用 Stream，用户只要给出需要对其包含的元素执行什么操作，比如 “过滤掉长度大于 10 的字符串”、“获取每个字符串的首字母”等，Stream 会隐式地在内部进行遍历，做出相应的数据转换。下面我们就看一些例子，深入了解下 Stream 的使用。</p>
<h2 id="集合迭代"><a href="#集合迭代" class="headerlink" title="集合迭代"></a>集合迭代</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; numList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通的 for 循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n : numList) &#123;</span><br><span class="line">    System.out.println(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Lambda 表达式</span></span><br><span class="line">numList.forEach(n -&gt; System.out.println(n));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Java 8 的方法引用</span></span><br><span class="line"><span class="comment">// 看起来像C++的作用域解析运算符</span></span><br><span class="line">numList.forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<p>上面的例子包含普通的for循环，Lambda表达式遍历的方式，最后一种方式是方法引用，让代码量再次减少，代码更加清晰。</p>
<h2 id="集合过滤"><a href="#集合过滤" class="headerlink" title="集合过滤"></a>集合过滤</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输出集合中所有大于5的值</span></span><br><span class="line">numList.stream().filter(n -&gt; n &gt; <span class="number">5</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<p>上面的代码中 <code>filter(n -&gt; n &gt; 5)</code>就是获得集合中大于5的所有值，filter 的参数是 <code>java.util.function.Predicate</code>，返回值是一个 Stream。使用 Predicate 可以向API方法添加逻辑，用更少的代码支持更多的动态行为。上面的例子就是使用 Predicate 对集合进行过滤。在 filter() 方法中，我们可以写更多复杂的逻辑来过滤集合元素。甚至可以使用 <code>and()</code> 或者 <code>or()</code>等合并多个条件，如下面这样。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输出集合中所有大于5并且小于8的值</span></span><br><span class="line">Predicate&lt;Integer&gt; start = n -&gt; n &gt;<span class="number">5</span>;</span><br><span class="line">Predicate&lt;Integer&gt; end = n -&gt; n &lt;<span class="number">8</span>;</span><br><span class="line">numList.stream().filter(start.and(end)).forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<p>另外，关于 filter() 方法有个常见误解。在现实生活中，做过滤的时候，通常会丢弃部分，但使用filter()方法则是获得一个新的列表，且其每个元素符合过滤原则。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个新的集合，所有元素的值大于5</span></span><br><span class="line">List&lt;Integer&gt; newNumList = numList.stream().filter(n -&gt; n &gt; <span class="number">5</span>).collect(Collectors.toList());</span><br><span class="line">newNumList.forEach(System.out::println);</span><br><span class="line">System.out.println();</span><br><span class="line">numList.forEach(System.out::print);</span><br></pre></td></tr></table></figure>
<p>输出是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">678910</span><br><span class="line">12345678910</span><br></pre></td></tr></table></figure>
<h2 id="Stream-的-map-示例"><a href="#Stream-的-map-示例" class="headerlink" title="Stream 的 map 示例"></a>Stream 的 map 示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将集合中的所有值计算平方后输出</span></span><br><span class="line">numList.stream().map(n -&gt; n * n).forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<p>本例介绍最广为人知的函数式编程概念 map。它允许你将对象进行转换。例如在本例中，我们将 <code>n -&gt; n * n</code> lambda 表达式传到 map() 方法，后者将其应用到流中的每一个元素。然后用 <code>forEach()</code> 将列表元素打印出来。</p>
<h2 id="Stream-的-Reduce-示例"><a href="#Stream-的-Reduce-示例" class="headerlink" title="Stream 的 Reduce 示例"></a>Stream 的 Reduce 示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将集合中的所有值求和</span></span><br><span class="line"><span class="keyword">int</span> result = numList.stream().reduce((sum, n) -&gt; sum + n).get();</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure>
<p>在上个例子中，可以看到map将集合类（例如列表）元素进行转换的。还有一个 reduce() 函数可以将所有值合并成一个。Map和Reduce操作是函数式编程的核心操作，因为其功能，reduce 又被称为折叠操作。另外，reduce 并不是一个新的操作，你有可能已经在使用它。SQL中类似 sum()、avg() 或者 count() 的聚集函数，实际上就是 reduce 操作，因为它们接收多个值并返回一个值。流API定义的 reduce() 函数可以接受lambda表达式，并对所有值进行合并。IntStream这样的类有类似 average()、count()、sum() 的内建方法来做 reduce 操作，也有mapToLong()、mapToDouble() 方法来做转换。这并不会限制你，你可以用内建方法，也可以自己定义。</p>
<h2 id="计算集合元素的最大值、最小值、总和以及平均值"><a href="#计算集合元素的最大值、最小值、总和以及平均值" class="headerlink" title="计算集合元素的最大值、最小值、总和以及平均值"></a>计算集合元素的最大值、最小值、总和以及平均值</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算集合元素的最大值、最小值、总和以及平均值</span></span><br><span class="line">IntSummaryStatistics stats = numList.stream().mapToInt((x) -&gt; x).summaryStatistics();</span><br><span class="line">System.out.println(<span class="string">"Highest prime number in List : "</span> + stats.getMax());</span><br><span class="line">System.out.println(<span class="string">"Lowest prime number in List : "</span> + stats.getMin());</span><br><span class="line">System.out.println(<span class="string">"Sum of all prime numbers : "</span> + stats.getSum());</span><br><span class="line">System.out.println(<span class="string">"Average of all prime numbers : "</span> + stats.getAverage());</span><br></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Highest prime number in List : 10</span><br><span class="line">Lowest prime number in List : 1</span><br><span class="line">Sum of all prime numbers : 55</span><br><span class="line">Average of all prime numbers : 5.5</span><br></pre></td></tr></table></figure></p>
<h2 id="并行流-parallelStream"><a href="#并行流-parallelStream" class="headerlink" title="并行流 parallelStream"></a>并行流 parallelStream</h2><p>上文有提到，Stream API 提供串行和并行两种模式进行汇聚操作，并发模式能够充分利用多核处理器的优势。串行流就是上面的 stream，而想要并行操作，就需要使用 parallelSteram。下面举一个例子来看看 stream 和 parallelStream 的区别。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParallelStreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; numList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        doFor(numList);</span><br><span class="line">        doStream(numList);</span><br><span class="line">        doParallelStream(numList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doFor</span><span class="params">(List&lt;Integer&gt; numList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : numList) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(num);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">long</span> stop = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"doFor: "</span> + (stop - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doStream</span><span class="params">(List&lt;Integer&gt; numList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        numList.stream().forEach(num -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(num);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">long</span> stop = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"doStream: "</span> + (stop - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doParallelStream</span><span class="params">(List&lt;Integer&gt; numList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        numList.parallelStream().forEach(num -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(num);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">long</span> stop = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"doParallelStream: "</span> + (stop - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12345</span><br><span class="line">doFor: 5003</span><br><span class="line">12345</span><br><span class="line">doStream: 5003</span><br><span class="line">34251</span><br><span class="line">doParallelStream: 1009</span><br></pre></td></tr></table></figure>
<p>代码上 stream 和 parallelStream 语法差异较小，用法基本一样。从执行结果来看，stream 顺序输出，而 parallelStream 无序输出；parallelStream 执行耗时是 stream 的五分之一，stream 和 for 循环用时一样。可以看到在当前测试场景下，parallelStream 获得的相对较好的执行性能，那 parallelStream 背后到底是什么呢？<br>要深入了解 parallelStream，首先要弄明白 ForkJoin 框架和 ForkJoinPool。ForkJoin 框架是 java 7 中提供的并行执行框架，他的策略是分而治之。说白了，就是把一个大的任务切分成很多小的子任务，子任务执行完毕后，再把结果合并起来。</p>
<h2 id="parallelStream-使用注意点"><a href="#parallelStream-使用注意点" class="headerlink" title="parallelStream 使用注意点"></a>parallelStream 使用注意点</h2><p>在开发过程中，经常会遇到遍历一个很大的集合做重复的操作，这时候如果使用串行执行会相当耗时，因此一般会采用多线程来提速。但是 parallelStream 若使用不当，很容易掉进陷阱中。总结以下几点需要注意：</p>
<ul>
<li>parallelStream 对集合操作是无序的，所以若需要顺序操作，请使用 stream 或者使用 parallelStream().forEachOrdered，后者执行时间就和 stream一样了，并不会提高效率。</li>
<li>parallelStream 速度并不会总是比 stream 快。将上面的例子修改为 <code>Thread.sleep(1)</code>，输出结果为：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12345</span><br><span class="line">doFor: 10</span><br><span class="line">12345</span><br><span class="line">doStream: 12</span><br><span class="line">32154</span><br><span class="line">doParallelStream: 13</span><br></pre></td></tr></table></figure>
<p>可见并不是并行执行就是性能最好的，要根据具体的应用场景测试分析。这个例子中，每个子任务执行时间较短，而线程切换消耗了大量时间。</p>
<ul>
<li>paralleStream 是非线程安全的！非线程安全！非线程安全！重要的事情说三遍。下面看一个例子就可以很明显的看到了。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSafeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; list3 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IntStream.range(<span class="number">0</span>, <span class="number">10000</span>).forEach(list1::add);</span><br><span class="line"></span><br><span class="line">        IntStream.range(<span class="number">0</span>, <span class="number">10000</span>).parallel().forEach(list2::add);</span><br><span class="line"></span><br><span class="line">        IntStream.range(<span class="number">0</span>, <span class="number">10000</span>).forEach(i -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                list3.add(i);</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"串行执行的大小："</span> + list1.size());</span><br><span class="line">        System.out.println(<span class="string">"并行执行的大小："</span> + list2.size());</span><br><span class="line">        System.out.println(<span class="string">"加锁并行执行的大小："</span> + list3.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">串行执行的大小：10000</span><br><span class="line">并行执行的大小：9592</span><br><span class="line">加锁并行执行的大小：10000</span><br></pre></td></tr></table></figure>
<p>显而易见，stream.parallel.forEach()中执行的操作并非线程安全。如果需要线程安全，可以把集合转换为同步集合，即：Collections.synchronizedList(new ArrayList&lt;&gt;())。也可以像例子中的那样，对操作进行加锁。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>Lambda 表达式提供了 Java 的函数化编程能力，取代了匿名内部类。让我们的代码量更少更美观。</li>
<li>Lambda表达式在Java中又称为闭包或匿名函数。</li>
<li>Stream API 提供了强大的集合操作。让我们在开发过程中更关心逻辑，而不是怎么详细的去实现。</li>
<li>stream 是串行的，线程安全的。parallelStream 是并行的，线程不安全的，在使用过程中尤其要注意。</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<p><a href="http://www.runoob.com/java/java8-lambda-expressions.html" title="Java 8 Lambda 表达式 | 菜鸟教程" target="_blank" rel="noopener">Java 8 Lambda 表达式 | 菜鸟教程</a><br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/index.html" title="Java 8 中的 Streams API 详解 | IBM Developer" target="_blank" rel="noopener">Java 8 中的 Streams API 详解 | IBM Developer</a><br><a href="http://www.importnew.com/16436.html" title="Java 8 Lambda 表达式10个示例 | ImportNew" target="_blank" rel="noopener">Java 8 Lambda 表达式10个示例 | ImportNew</a><br><a href="https://zhuanlan.zhihu.com/p/43039062" title="Java 8 parallelStream 浅析 | 知乎" target="_blank" rel="noopener">Java 8 parallelStream 浅析 | 知乎</a><br><a href="https://www.cnblogs.com/puyangsky/p/7608741.html" title="Java 8 parallelStream 并发安全的思考 | puyangsky 博客园" target="_blank" rel="noopener">Java 8 parallelStream 并发安全的思考 | puyangsky 博客园</a><br><a href="https://blog.csdn.net/u011001723/article/details/52794455" title="深入浅出 parallelStream | 梦铃之境的专栏" target="_blank" rel="noopener">深入浅出 parallelStream | 梦铃之境的专栏</a></p>
</blockquote>
<hr>
<blockquote>
<p>文章标题：<a href="http://www.cylong.com/blog/2019/03/18/lambda/" title="Java 8 的 Lambda 表达式和 Stream API">Java 8 的 Lambda 表达式和 Stream API</a><br>文章作者：<a href="http://www.cylong.com/about/" title="cylong">cylong</a><br>文章链接：<a href="http://www.cylong.com/blog/2019/03/18/lambda/" title="Java 8 的 Lambda 表达式和 Stream API">http://www.cylong.com/blog/2019/03/18/lambda/</a><br>有问题或者建议欢迎在下方评论。欢迎转载、引用，但希望标明出处，感激不尽(●’◡’●)</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>lambda</tag>
      </tags>
  </entry>
</search>
